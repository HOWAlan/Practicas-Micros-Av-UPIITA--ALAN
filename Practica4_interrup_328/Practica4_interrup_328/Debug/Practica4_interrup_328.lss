
Practica4_interrup_328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003cc  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a9  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000240  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000202  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000387  00000000  00000000  00000df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_3>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  8e:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_3>:
uint8_t output = 0x01;
uint8_t	sequencePointer = SEQUENCE2;

////////////////////////////////////////////////////////////////////////////////
//---------------------------Vectores de interrupción-------------------------
ISR(PCINT0_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
	//PORTC = PINB&0b00000111;
	switch(PINB&0b00000111)
  a2:	83 b1       	in	r24, 0x03	; 3
  a4:	87 70       	andi	r24, 0x07	; 7
  a6:	85 30       	cpi	r24, 0x05	; 5
  a8:	51 f0       	breq	.+20     	; 0xbe <__vector_3+0x28>
  aa:	86 30       	cpi	r24, 0x06	; 6
  ac:	19 f0       	breq	.+6      	; 0xb4 <__vector_3+0x1e>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	89 f4       	brne	.+34     	; 0xd4 <__vector_3+0x3e>
  b2:	0b c0       	rjmp	.+22     	; 0xca <__vector_3+0x34>
	{
		case INT0_:
		PORTC = PINB;
  b4:	83 b1       	in	r24, 0x03	; 3
  b6:	88 b9       	out	0x08, r24	; 8
		sequencePointer = SEQUENCE1;
  b8:	10 92 00 01 	sts	0x0100, r1
		break;
  bc:	0b c0       	rjmp	.+22     	; 0xd4 <__vector_3+0x3e>
		
		case INT1_:
		PORTC = PINB;
  be:	83 b1       	in	r24, 0x03	; 3
  c0:	88 b9       	out	0x08, r24	; 8
		sequencePointer = SEQUENCE2;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 00 01 	sts	0x0100, r24
		break;
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <__vector_3+0x3e>
		
		case INT2_:
		PORTC = PINB;
  ca:	83 b1       	in	r24, 0x03	; 3
  cc:	88 b9       	out	0x08, r24	; 8
		sequencePointer = SEQUENCE3;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	80 93 00 01 	sts	0x0100, r24
		break;
		
		default:
		break;
	}
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <ConfigIO>:
////////////////////////////////////////////////////////////////////////////////


void ConfigIO()
{
	cli();
  e0:	f8 94       	cli
	LEDS_DDR = 0xFF;//SALIDAS PARA LEDS
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a b9       	out	0x0a, r24	; 10
	LEDS_PORT = 0X00;// VALOR INICIAL
  e6:	1b b8       	out	0x0b, r1	; 11
	
	DDRC = 0xff;
  e8:	87 b9       	out	0x07, r24	; 7
	PORTC =0x00;
  ea:	18 b8       	out	0x08, r1	; 8
	DDRB = 0B11111000; //INTERRUPCIONES
  ec:	88 ef       	ldi	r24, 0xF8	; 248
  ee:	84 b9       	out	0x04, r24	; 4
	PORTB = 0B00000111;//PULLUP ENABLE
  f0:	87 e0       	ldi	r24, 0x07	; 7
  f2:	85 b9       	out	0x05, r24	; 5

	//-----------CONFIGURAR INTERRUPCIONES---------
	PCICR|=(1<<PCIE0); //ACTIVA PCINT0
  f4:	e8 e6       	ldi	r30, 0x68	; 104
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT0)|(1<<PCINT1)|(1<<PCINT2);
  fe:	eb e6       	ldi	r30, 0x6B	; 107
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	87 60       	ori	r24, 0x07	; 7
 106:	80 83       	st	Z, r24
	sei();
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <LedSequence1>:
////////////////////////////////////////////////////////////////////////////////
//--------------------------program's functions------------------------------

void LedSequence1()
{
	output = 0x01;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 01 01 	sts	0x0101, r24
	LEDS_PORT = output;
 112:	8b b9       	out	0x0b, r24	; 11
	for(uint8_t j=0; j<7; j++)
	{
		if(sequencePointer!= SEQUENCE1) // go out if interrupt has occurred
 114:	80 91 00 01 	lds	r24, 0x0100
 118:	88 23       	and	r24, r24
 11a:	c9 f1       	breq	.+114    	; 0x18e <LedSequence1+0x82>
 11c:	08 95       	ret
 11e:	90 91 00 01 	lds	r25, 0x0100
 122:	91 11       	cpse	r25, r1
 124:	42 c0       	rjmp	.+132    	; 0x1aa <LedSequence1+0x9e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	ef e4       	ldi	r30, 0x4F	; 79
 128:	f3 ec       	ldi	r31, 0xC3	; 195
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LedSequence1+0x1e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LedSequence1+0x24>
 130:	00 00       	nop
		return;
		
		_delay_ms(WAIT_LED);
		output = (output<<1);
 132:	90 91 01 01 	lds	r25, 0x0101
 136:	99 0f       	add	r25, r25
 138:	90 93 01 01 	sts	0x0101, r25
		LEDS_PORT = output;
 13c:	9b b9       	out	0x0b, r25	; 11
 13e:	81 50       	subi	r24, 0x01	; 1

void LedSequence1()
{
	output = 0x01;
	LEDS_PORT = output;
	for(uint8_t j=0; j<7; j++)
 140:	71 f7       	brne	.-36     	; 0x11e <LedSequence1+0x12>
		LEDS_PORT = output;
	}
	
	for(uint8_t j=0; j<7; j++)
	{
		if(sequencePointer!= SEQUENCE1) // go out if interrupt has occurred
 142:	80 91 00 01 	lds	r24, 0x0100
 146:	88 23       	and	r24, r24
 148:	a1 f0       	breq	.+40     	; 0x172 <LedSequence1+0x66>
 14a:	08 95       	ret
 14c:	90 91 00 01 	lds	r25, 0x0100
 150:	91 11       	cpse	r25, r1
 152:	2b c0       	rjmp	.+86     	; 0x1aa <LedSequence1+0x9e>
 154:	ef e4       	ldi	r30, 0x4F	; 79
 156:	f3 ec       	ldi	r31, 0xC3	; 195
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LedSequence1+0x4c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LedSequence1+0x52>
 15e:	00 00       	nop
			return;
		
		_delay_ms(WAIT_LED);
		output = (output>>1);
 160:	90 91 01 01 	lds	r25, 0x0101
 164:	96 95       	lsr	r25
 166:	90 93 01 01 	sts	0x0101, r25
		LEDS_PORT = output;
 16a:	9b b9       	out	0x0b, r25	; 11
 16c:	81 50       	subi	r24, 0x01	; 1
		_delay_ms(WAIT_LED);
		output = (output<<1);
		LEDS_PORT = output;
	}
	
	for(uint8_t j=0; j<7; j++)
 16e:	71 f7       	brne	.-36     	; 0x14c <LedSequence1+0x40>
 170:	08 95       	ret
 172:	8f e4       	ldi	r24, 0x4F	; 79
 174:	93 ec       	ldi	r25, 0xC3	; 195
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LedSequence1+0x6a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LedSequence1+0x70>
 17c:	00 00       	nop
	{
		if(sequencePointer!= SEQUENCE1) // go out if interrupt has occurred
			return;
		
		_delay_ms(WAIT_LED);
		output = (output>>1);
 17e:	80 91 01 01 	lds	r24, 0x0101
 182:	86 95       	lsr	r24
 184:	80 93 01 01 	sts	0x0101, r24
		LEDS_PORT = output;
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	df cf       	rjmp	.-66     	; 0x14c <LedSequence1+0x40>
 18e:	ef e4       	ldi	r30, 0x4F	; 79
 190:	f3 ec       	ldi	r31, 0xC3	; 195
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LedSequence1+0x86>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LedSequence1+0x8c>
 198:	00 00       	nop
	{
		if(sequencePointer!= SEQUENCE1) // go out if interrupt has occurred
		return;
		
		_delay_ms(WAIT_LED);
		output = (output<<1);
 19a:	80 91 01 01 	lds	r24, 0x0101
 19e:	88 0f       	add	r24, r24
 1a0:	80 93 01 01 	sts	0x0101, r24
		LEDS_PORT = output;
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	ba cf       	rjmp	.-140    	; 0x11e <LedSequence1+0x12>
 1aa:	08 95       	ret

000001ac <LedSequence2>:
	return;
}
//--------------------------------------------------------------------------------

void LedSequence2()
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
	uint8_t varAux = 0x00;
	output = 0X00;
 1b0:	10 92 01 01 	sts	0x0101, r1
	LEDS_PORT = output;
 1b4:	1b b8       	out	0x0b, r1	; 11
 1b6:	2f e5       	ldi	r18, 0x5F	; 95
 1b8:	8a ee       	ldi	r24, 0xEA	; 234
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <LedSequence2+0x10>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LedSequence2+0x1a>
 1c6:	00 00       	nop
 1c8:	e7 e0       	ldi	r30, 0x07	; 7
 1ca:	68 e0       	ldi	r22, 0x08	; 8
	for(uint8_t j = 8; j>0; j--)
	{
		varAux = 0x01;
		for(uint8_t k = 0; k<j; k++)
		{
			if(sequencePointer!= SEQUENCE2) // go out if interrupt has occurred
 1cc:	a0 e0       	ldi	r26, 0x00	; 0
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
				return;
			varAux=(1<<k);
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	25 c0       	rjmp	.+74     	; 0x220 <LedSequence2+0x74>
 1d6:	01 96       	adiw	r24, 0x01	; 1
	for(uint8_t j = 8; j>0; j--)
	{
		varAux = 0x01;
		for(uint8_t k = 0; k<j; k++)
		{
			if(sequencePointer!= SEQUENCE2) // go out if interrupt has occurred
 1d8:	20 91 00 01 	lds	r18, 0x0100
 1dc:	21 30       	cpi	r18, 0x01	; 1
 1de:	b9 f5       	brne	.+110    	; 0x24e <LedSequence2+0xa2>
				return;
			varAux=(1<<k);
 1e0:	9a 01       	movw	r18, r20
 1e2:	08 2e       	mov	r0, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <LedSequence2+0x3e>
 1e6:	22 0f       	add	r18, r18
 1e8:	33 1f       	adc	r19, r19
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <LedSequence2+0x3a>
 1ee:	72 2f       	mov	r23, r18
			LEDS_PORT=output|varAux;
 1f0:	30 91 01 01 	lds	r19, 0x0101
 1f4:	23 2b       	or	r18, r19
 1f6:	2b b9       	out	0x0b, r18	; 11
 1f8:	cf e4       	ldi	r28, 0x4F	; 79
 1fa:	d3 ec       	ldi	r29, 0xC3	; 195
 1fc:	21 97       	sbiw	r28, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LedSequence2+0x50>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LedSequence2+0x56>
 202:	00 00       	nop
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	28 0f       	add	r18, r24
	LEDS_PORT = output;
	_delay_ms(300);
	for(uint8_t j = 8; j>0; j--)
	{
		varAux = 0x01;
		for(uint8_t k = 0; k<j; k++)
 208:	26 17       	cp	r18, r22
 20a:	28 f3       	brcs	.-54     	; 0x1d6 <LedSequence2+0x2a>
				return;
			varAux=(1<<k);
			LEDS_PORT=output|varAux;
			_delay_ms(200);
		}
		output |= varAux;
 20c:	80 91 01 01 	lds	r24, 0x0101
 210:	78 2b       	or	r23, r24
 212:	70 93 01 01 	sts	0x0101, r23
		LEDS_PORT = output;
 216:	7b b9       	out	0x0b, r23	; 11
{
	uint8_t varAux = 0x00;
	output = 0X00;
	LEDS_PORT = output;
	_delay_ms(300);
	for(uint8_t j = 8; j>0; j--)
 218:	ee 23       	and	r30, r30
 21a:	59 f0       	breq	.+22     	; 0x232 <LedSequence2+0x86>
 21c:	61 50       	subi	r22, 0x01	; 1
 21e:	e1 50       	subi	r30, 0x01	; 1
	{
		varAux = 0x01;
		for(uint8_t k = 0; k<j; k++)
 220:	66 23       	and	r22, r22
 222:	71 f0       	breq	.+28     	; 0x240 <LedSequence2+0x94>
		{
			if(sequencePointer!= SEQUENCE2) // go out if interrupt has occurred
 224:	80 91 00 01 	lds	r24, 0x0100
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	89 f4       	brne	.+34     	; 0x24e <LedSequence2+0xa2>
 22c:	8a 2f       	mov	r24, r26
 22e:	9f 2f       	mov	r25, r31
 230:	d7 cf       	rjmp	.-82     	; 0x1e0 <LedSequence2+0x34>
 232:	8f e4       	ldi	r24, 0x4F	; 79
 234:	93 ec       	ldi	r25, 0xC3	; 195
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LedSequence2+0x8a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LedSequence2+0x90>
 23c:	00 00       	nop
 23e:	07 c0       	rjmp	.+14     	; 0x24e <LedSequence2+0xa2>
				return;
			varAux=(1<<k);
			LEDS_PORT=output|varAux;
			_delay_ms(200);
		}
		output |= varAux;
 240:	80 91 01 01 	lds	r24, 0x0101
 244:	81 60       	ori	r24, 0x01	; 1
 246:	80 93 01 01 	sts	0x0101, r24
		LEDS_PORT = output;
 24a:	8b b9       	out	0x0b, r24	; 11
 24c:	e7 cf       	rjmp	.-50     	; 0x21c <LedSequence2+0x70>
	}
	_delay_ms(WAIT_LED);
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <LedSequence3>:

void LedSequence3()
{
 254:	83 e0       	ldi	r24, 0x03	; 3
	for(uint8_t i = 0; i<3; i++)
	{
			output = 0xff;
 256:	9f ef       	ldi	r25, 0xFF	; 255
 258:	90 93 01 01 	sts	0x0101, r25
			LEDS_PORT = output;
 25c:	9b b9       	out	0x0b, r25	; 11
 25e:	eb e7       	ldi	r30, 0x7B	; 123
 260:	f2 e9       	ldi	r31, 0x92	; 146
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LedSequence3+0xe>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LedSequence3+0x14>
 268:	00 00       	nop
			_delay_ms(150);
			output = 0x00;
 26a:	10 92 01 01 	sts	0x0101, r1
			LEDS_PORT = output;
 26e:	1b b8       	out	0x0b, r1	; 11
 270:	e3 ee       	ldi	r30, 0xE3	; 227
 272:	f7 e5       	ldi	r31, 0x57	; 87
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LedSequence3+0x20>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LedSequence3+0x26>
 27a:	00 00       	nop
 27c:	81 50       	subi	r24, 0x01	; 1
	_delay_ms(WAIT_LED);
}

void LedSequence3()
{
	for(uint8_t i = 0; i<3; i++)
 27e:	61 f7       	brne	.-40     	; 0x258 <LedSequence3+0x4>
 280:	ff e5       	ldi	r31, 0x5F	; 95
 282:	2a ee       	ldi	r18, 0xEA	; 234
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	f1 50       	subi	r31, 0x01	; 1
 288:	20 40       	sbci	r18, 0x00	; 0
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <LedSequence3+0x32>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LedSequence3+0x3c>
 290:	00 00       	nop
 292:	08 95       	ret

00000294 <main>:
}


int main(void)
{
	ConfigIO(); //CONFIGURAR ENTRADAS Y SALIDAS
 294:	0e 94 70 00 	call	0xe0	; 0xe0 <ConfigIO>
	
	/* Replace with your application code */
	while (1)
	{
		switch(sequencePointer)
 298:	80 91 00 01 	lds	r24, 0x0100
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	39 f0       	breq	.+14     	; 0x2ae <main+0x1a>
 2a0:	18 f0       	brcs	.+6      	; 0x2a8 <main+0x14>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	39 f0       	breq	.+14     	; 0x2b4 <main+0x20>
 2a6:	fa cf       	rjmp	.-12     	; 0x29c <main+0x8>
		{
			case SEQUENCE1:
			LedSequence1();
 2a8:	0e 94 86 00 	call	0x10c	; 0x10c <LedSequence1>
			break;
 2ac:	f5 cf       	rjmp	.-22     	; 0x298 <main+0x4>
			
			case SEQUENCE2:
			LedSequence2();
 2ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LedSequence2>
			break;
 2b2:	f2 cf       	rjmp	.-28     	; 0x298 <main+0x4>
			
			case SEQUENCE3:
			LedSequence3();
 2b4:	0e 94 2a 01 	call	0x254	; 0x254 <LedSequence3>
			break;
 2b8:	ef cf       	rjmp	.-34     	; 0x298 <main+0x4>

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
