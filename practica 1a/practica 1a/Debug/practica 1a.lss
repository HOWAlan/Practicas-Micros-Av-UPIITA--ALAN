
practica 1a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000114  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  000001ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006df  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e2  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e1  00000000  00000000  00000ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033d  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int c = 0;

int main(void)
{
	//config
	DDRA = 0XFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = 255;
  96:	87 bb       	out	0x17, r24	; 23
	DDRC = 0B11111111;
  98:	84 bb       	out	0x14, r24	; 20
	DDRD = 0XFF;
  9a:	81 bb       	out	0x11, r24	; 17
	
    while(1)
    {
		PORTA = i;
  9c:	c2 e6       	ldi	r28, 0x62	; 98
  9e:	d0 e0       	ldi	r29, 0x00	; 0
		PORTB = j;
  a0:	a0 e6       	ldi	r26, 0x60	; 96
  a2:	b0 e0       	ldi	r27, 0x00	; 0
		PORTC = j;
		PORTD = i;
		
		_delay_ms(WAIT_TIME);
		
		PORTA = c;
  a4:	e4 e6       	ldi	r30, 0x64	; 100
  a6:	f0 e0       	ldi	r31, 0x00	; 0
	DDRC = 0B11111111;
	DDRD = 0XFF;
	
    while(1)
    {
		PORTA = i;
  a8:	88 81       	ld	r24, Y
  aa:	8b bb       	out	0x1b, r24	; 27
		PORTB = j;
  ac:	8c 91       	ld	r24, X
  ae:	88 bb       	out	0x18, r24	; 24
		PORTC = i;
  b0:	88 81       	ld	r24, Y
  b2:	85 bb       	out	0x15, r24	; 21
		PORTD = j;
  b4:	8c 91       	ld	r24, X
  b6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2f e9       	ldi	r18, 0x9F	; 159
  ba:	86 e8       	ldi	r24, 0x86	; 134
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x2c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x36>
  c8:	00 00       	nop
		
		_delay_ms(WAIT_TIME);
		
		PORTA = j;
  ca:	8c 91       	ld	r24, X
  cc:	8b bb       	out	0x1b, r24	; 27
		PORTB = i;
  ce:	88 81       	ld	r24, Y
  d0:	88 bb       	out	0x18, r24	; 24
		PORTC = j;
  d2:	8c 91       	ld	r24, X
  d4:	85 bb       	out	0x15, r24	; 21
		PORTD = i;
  d6:	88 81       	ld	r24, Y
  d8:	82 bb       	out	0x12, r24	; 18
  da:	2f e9       	ldi	r18, 0x9F	; 159
  dc:	86 e8       	ldi	r24, 0x86	; 134
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x4e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x58>
  ea:	00 00       	nop
		
		_delay_ms(WAIT_TIME);
		
		PORTA = c;
  ec:	80 81       	ld	r24, Z
  ee:	8b bb       	out	0x1b, r24	; 27
		PORTB = c;
  f0:	80 81       	ld	r24, Z
  f2:	88 bb       	out	0x18, r24	; 24
		PORTC = c;
  f4:	80 81       	ld	r24, Z
  f6:	85 bb       	out	0x15, r24	; 21
		PORTD = c;
  f8:	80 81       	ld	r24, Z
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	2f e9       	ldi	r18, 0x9F	; 159
  fe:	86 e8       	ldi	r24, 0x86	; 134
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x70>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x7a>
 10c:	00 00       	nop
 10e:	cc cf       	rjmp	.-104    	; 0xa8 <main+0x16>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
