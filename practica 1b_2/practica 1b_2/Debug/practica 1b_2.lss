
practica 1b_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b9  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <stdint.h>


int main(void)
{
	DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
  70:	87 bb       	out	0x17, r24	; 23
	uint16_t j = 0x01;
	OUT_PORT = 0x01;
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	8b bb       	out	0x1b, r24	; 27
	OUT_PORT_2 = 0x01;
  76:	88 bb       	out	0x18, r24	; 24

int main(void)
{
	DDRA = 0xff;
	DDRB = 0xff;
	uint16_t j = 0x01;
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	50 e0       	ldi	r21, 0x00	; 0
	OUT_PORT = 0x01;
	OUT_PORT_2 = 0x01;
    /* Replace with your application code */
    while (1) 
    {
		for(int i = 0; i<15; i++)
  7c:	e0 e0       	ldi	r30, 0x00	; 0
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	20 c0       	rjmp	.+64     	; 0xc2 <main+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	8f e4       	ldi	r24, 0x4F	; 79
  84:	93 ec       	ldi	r25, 0xC3	; 195
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x1a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
		{
			_delay_ms(TIME_DELAY);
			j = (j<<1);
  8e:	44 0f       	add	r20, r20
  90:	55 1f       	adc	r21, r21
			OUT_PORT_2 = (j&0b0000000011111111);
  92:	48 bb       	out	0x18, r20	; 24
			OUT_PORT = ((j>>8)%0b0000000011111111);
  94:	c5 2f       	mov	r28, r21
  96:	dd 27       	eor	r29, r29
  98:	9e 01       	movw	r18, r28
  9a:	a1 e8       	ldi	r26, 0x81	; 129
  9c:	b0 e8       	ldi	r27, 0x80	; 128
  9e:	0e 94 8b 00 	call	0x116	; 0x116 <__umulhisi3>
  a2:	88 0f       	add	r24, r24
  a4:	89 2f       	mov	r24, r25
  a6:	88 1f       	adc	r24, r24
  a8:	99 0b       	sbc	r25, r25
  aa:	91 95       	neg	r25
  ac:	6f ef       	ldi	r22, 0xFF	; 255
  ae:	68 9f       	mul	r22, r24
  b0:	90 01       	movw	r18, r0
  b2:	69 9f       	mul	r22, r25
  b4:	30 0d       	add	r19, r0
  b6:	11 24       	eor	r1, r1
  b8:	ce 01       	movw	r24, r28
  ba:	82 1b       	sub	r24, r18
  bc:	93 0b       	sbc	r25, r19
  be:	8b bb       	out	0x1b, r24	; 27
	OUT_PORT = 0x01;
	OUT_PORT_2 = 0x01;
    /* Replace with your application code */
    while (1) 
    {
		for(int i = 0; i<15; i++)
  c0:	31 96       	adiw	r30, 0x01	; 1
  c2:	ef 30       	cpi	r30, 0x0F	; 15
  c4:	f1 05       	cpc	r31, r1
  c6:	ec f2       	brlt	.-70     	; 0x82 <main+0x16>
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	20 c0       	rjmp	.+64     	; 0x10e <main+0xa2>
  ce:	8f e4       	ldi	r24, 0x4F	; 79
  d0:	93 ec       	ldi	r25, 0xC3	; 195
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x66>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
		}
		
		for(int i = 0; i<15; i++)
		{
			_delay_ms(TIME_DELAY);
			j = (j>>1);
  da:	56 95       	lsr	r21
  dc:	47 95       	ror	r20
			OUT_PORT_2 = (j&0b0000000011111111);
  de:	48 bb       	out	0x18, r20	; 24
			OUT_PORT = ((j>>8)%0b0000000011111111);
  e0:	c5 2f       	mov	r28, r21
  e2:	dd 27       	eor	r29, r29
  e4:	9e 01       	movw	r18, r28
  e6:	a1 e8       	ldi	r26, 0x81	; 129
  e8:	b0 e8       	ldi	r27, 0x80	; 128
  ea:	0e 94 8b 00 	call	0x116	; 0x116 <__umulhisi3>
  ee:	88 0f       	add	r24, r24
  f0:	89 2f       	mov	r24, r25
  f2:	88 1f       	adc	r24, r24
  f4:	99 0b       	sbc	r25, r25
  f6:	91 95       	neg	r25
  f8:	6f ef       	ldi	r22, 0xFF	; 255
  fa:	68 9f       	mul	r22, r24
  fc:	90 01       	movw	r18, r0
  fe:	69 9f       	mul	r22, r25
 100:	30 0d       	add	r19, r0
 102:	11 24       	eor	r1, r1
 104:	ce 01       	movw	r24, r28
 106:	82 1b       	sub	r24, r18
 108:	93 0b       	sbc	r25, r19
 10a:	8b bb       	out	0x1b, r24	; 27
			j = (j<<1);
			OUT_PORT_2 = (j&0b0000000011111111);
			OUT_PORT = ((j>>8)%0b0000000011111111);
		}
		
		for(int i = 0; i<15; i++)
 10c:	31 96       	adiw	r30, 0x01	; 1
 10e:	ef 30       	cpi	r30, 0x0F	; 15
 110:	f1 05       	cpc	r31, r1
 112:	ec f2       	brlt	.-70     	; 0xce <main+0x62>
 114:	b3 cf       	rjmp	.-154    	; 0x7c <main+0x10>

00000116 <__umulhisi3>:
 116:	a2 9f       	mul	r26, r18
 118:	b0 01       	movw	r22, r0
 11a:	b3 9f       	mul	r27, r19
 11c:	c0 01       	movw	r24, r0
 11e:	a3 9f       	mul	r26, r19
 120:	70 0d       	add	r23, r0
 122:	81 1d       	adc	r24, r1
 124:	11 24       	eor	r1, r1
 126:	91 1d       	adc	r25, r1
 128:	b2 9f       	mul	r27, r18
 12a:	70 0d       	add	r23, r0
 12c:	81 1d       	adc	r24, r1
 12e:	11 24       	eor	r1, r1
 130:	91 1d       	adc	r25, r1
 132:	08 95       	ret

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
