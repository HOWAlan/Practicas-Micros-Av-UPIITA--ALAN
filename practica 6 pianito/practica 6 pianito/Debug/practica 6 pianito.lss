
practica 6 pianito.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000472  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000472  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000512  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000170  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001fbe  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000049a  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000962  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000344  00000000  00000000  0000346c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000434  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000007c5  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000360  00000000  00000000  000043a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_19>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	d7 01       	movw	r26, r14
  56:	e0 01       	movw	r28, r0
  58:	e7 01       	movw	r28, r14
  5a:	f5 01       	movw	r30, r10
  5c:	fc 01       	movw	r30, r24
  5e:	03 02       	muls	r16, r19
  60:	11 02       	muls	r17, r17
  62:	18 02       	muls	r17, r24
  64:	1f 02       	muls	r17, r31
  66:	2d 02       	muls	r18, r29
  68:	2d 02       	muls	r18, r29
  6a:	2d 02       	muls	r18, r29
  6c:	2d 02       	muls	r18, r29
  6e:	2d 02       	muls	r18, r29
  70:	2d 02       	muls	r18, r29
  72:	2d 02       	muls	r18, r29
  74:	ee 01       	movw	r28, r28
  76:	0a 02       	muls	r16, r26
  78:	26 02       	muls	r18, r22

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf e5       	ldi	r28, 0x5F	; 95
  80:	d4 e0       	ldi	r29, 0x04	; 4
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	a0 e6       	ldi	r26, 0x60	; 96
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e2 e7       	ldi	r30, 0x72	; 114
  8e:	f4 e0       	ldi	r31, 0x04	; 4
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	ac 38       	cpi	r26, 0x8C	; 140
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>
  9c:	0e 94 88 01 	call	0x310	; 0x310 <main>
  a0:	0c 94 37 02 	jmp	0x46e	; 0x46e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <ENVIA_CMD>:

void ENVIA_CMD(char dato)
{
	char cmd_enviar;
	
	cmd_enviar =	(dato & 0xF0);      // se envia el nibble alto
  a8:	98 2f       	mov	r25, r24
  aa:	90 7f       	andi	r25, 0xF0	; 240
	LCD_PUERTO =  cmd_enviar;       // al puerto
  ac:	95 bb       	out	0x15, r25	; 21
	LCD_PUERTO &=~(1<<LCD_RS);  //  RS = 0
  ae:	aa 98       	cbi	0x15, 2	; 21
	LCD_PUERTO |= (1<<LCD_E);   //   E = 1
  b0:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	e9 ef       	ldi	r30, 0xF9	; 249
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <ENVIA_CMD+0xe>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <ENVIA_CMD+0x14>
  bc:	00 00       	nop
	_delay_ms(1);
	LCD_PUERTO &=~(1<<LCD_E);   //   E = 0
  be:	ab 98       	cbi	0x15, 3	; 21
  c0:	e3 ec       	ldi	r30, 0xC3	; 195
  c2:	f9 e0       	ldi	r31, 0x09	; 9
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <ENVIA_CMD+0x1c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <ENVIA_CMD+0x22>
  ca:	00 00       	nop
	_delay_ms(10);
	
	cmd_enviar=	((dato<<4) & 0xF0);  // Se envia el nibble bajo
  cc:	f0 e1       	ldi	r31, 0x10	; 16
  ce:	8f 9f       	mul	r24, r31
  d0:	c0 01       	movw	r24, r0
  d2:	11 24       	eor	r1, r1
	LCD_PUERTO =  cmd_enviar;        // al puerto
  d4:	85 bb       	out	0x15, r24	; 21
	LCD_PUERTO &=~(1<<LCD_RS);   //  RS = 0
  d6:	aa 98       	cbi	0x15, 2	; 21
	LCD_PUERTO |= (1<<LCD_E);    //   E = 1
  d8:	ab 9a       	sbi	0x15, 3	; 21
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <ENVIA_CMD+0x36>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <ENVIA_CMD+0x3c>
  e4:	00 00       	nop
	_delay_ms(1);
	LCD_PUERTO &=~(1<<LCD_E);    //    E = 0
  e6:	ab 98       	cbi	0x15, 3	; 21
  e8:	e3 ec       	ldi	r30, 0xC3	; 195
  ea:	f9 e0       	ldi	r31, 0x09	; 9
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <ENVIA_CMD+0x44>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <ENVIA_CMD+0x4a>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <LCD_INICIALIZA>:
	}
}

void LCD_INICIALIZA()
{
	ENVIA_CMD(0x02);
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
	ENVIA_CMD(0x28); // 0010 1000 DL = 0 comunicacion de 4 bits N = 1 Pantalla de 2 lineas F = 0 Caracteres de 5x7 puntos
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
	ENVIA_CMD(0x0E); // D=1 Display ON Cursor OFF
 102:	8e e0       	ldi	r24, 0x0E	; 14
 104:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
	ENVIA_CMD(0x06); // I/D = 1 Incremento Automatico S=0
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
	ENVIA_CMD(0x01);  // Limpia LCD
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
	ENVIA_CMD(0X80);
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
 11a:	08 95       	ret

0000011c <ENVIA_DATO>:

void ENVIA_DATO(char dato)
{
	char dto_enviar;
	
	dto_enviar=	(dato & 0xF0);      // se envia el nibble alto
 11c:	98 2f       	mov	r25, r24
 11e:	90 7f       	andi	r25, 0xF0	; 240
	LCD_PUERTO  =  dto_enviar;       // al puerto
 120:	95 bb       	out	0x15, r25	; 21
	LCD_PUERTO |= (1<<LCD_RS)|(1<<LCD_E);  //  RS = 1   E = 1
 122:	95 b3       	in	r25, 0x15	; 21
 124:	9c 60       	ori	r25, 0x0C	; 12
 126:	95 bb       	out	0x15, r25	; 21
 128:	e9 ef       	ldi	r30, 0xF9	; 249
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <ENVIA_DATO+0x10>
 130:	00 c0       	rjmp	.+0      	; 0x132 <ENVIA_DATO+0x16>
 132:	00 00       	nop
	_delay_ms(1);
	LCD_PUERTO &=~(1<<LCD_E);	//E=0
 134:	ab 98       	cbi	0x15, 3	; 21
	LCD_PUERTO &=~(1<<LCD_RS);	//RS=0
 136:	aa 98       	cbi	0x15, 2	; 21
 138:	e3 ec       	ldi	r30, 0xC3	; 195
 13a:	f9 e0       	ldi	r31, 0x09	; 9
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <ENVIA_DATO+0x20>
 140:	00 c0       	rjmp	.+0      	; 0x142 <ENVIA_DATO+0x26>
 142:	00 00       	nop
	_delay_ms(10);
	
	dto_enviar=	((dato<<4) & 0xF0);  // Se envia el nibble bajo
 144:	f0 e1       	ldi	r31, 0x10	; 16
 146:	8f 9f       	mul	r24, r31
 148:	c0 01       	movw	r24, r0
 14a:	11 24       	eor	r1, r1
	LCD_PUERTO =  dto_enviar;        // al puerto
 14c:	85 bb       	out	0x15, r24	; 21
	LCD_PUERTO |= (1<<LCD_RS)|(1<<LCD_E);  //  RS = 1   E = 1
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	8c 60       	ori	r24, 0x0C	; 12
 152:	85 bb       	out	0x15, r24	; 21
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <ENVIA_DATO+0x3c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <ENVIA_DATO+0x42>
 15e:	00 00       	nop
	_delay_ms(1);
	LCD_PUERTO &=~(1<<LCD_E);	//E=0
 160:	ab 98       	cbi	0x15, 3	; 21
	LCD_PUERTO &=~(1<<LCD_RS);	//RS=0
 162:	aa 98       	cbi	0x15, 2	; 21
 164:	e3 ec       	ldi	r30, 0xC3	; 195
 166:	f9 e0       	ldi	r31, 0x09	; 9
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <ENVIA_DATO+0x4c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <ENVIA_DATO+0x52>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <ENVIA_CADENA>:
	_delay_ms(10);
	return;
}

void ENVIA_CADENA(char *dato)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	int i;
	for(i=0;dato[i]!='\0';i++)
 178:	88 81       	ld	r24, Y
 17a:	88 23       	and	r24, r24
 17c:	31 f0       	breq	.+12     	; 0x18a <ENVIA_CADENA+0x18>
 17e:	21 96       	adiw	r28, 0x01	; 1
	ENVIA_DATO(dato[i]);
 180:	0e 94 8e 00 	call	0x11c	; 0x11c <ENVIA_DATO>
}

void ENVIA_CADENA(char *dato)
{
	int i;
	for(i=0;dato[i]!='\0';i++)
 184:	89 91       	ld	r24, Y+
 186:	81 11       	cpse	r24, r1
 188:	fb cf       	rjmp	.-10     	; 0x180 <ENVIA_CADENA+0xe>
	ENVIA_DATO(dato[i]);
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <LIMPIA_LCD>:

void LIMPIA_LCD ()
{
	ENVIA_CMD (0x01);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
 196:	08 95       	ret

00000198 <POS_LINEA1>:

void POS_LINEA1 (char posicion)
{
	char lineal = 0x80;
	posicion= posicion|lineal;
	ENVIA_CMD (posicion);
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
 19e:	08 95       	ret

000001a0 <APAGAR_CURSOR>:
	_delay_ms (50);
}

void APAGAR_CURSOR()
{
	ENVIA_CMD(0X0C);
 1a0:	8c e0       	ldi	r24, 0x0C	; 12
 1a2:	0e 94 54 00 	call	0xa8	; 0xa8 <ENVIA_CMD>
 1a6:	08 95       	ret

000001a8 <LEE_TECLADO>:
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
	switch(PORTD)
 1a8:	82 b3       	in	r24, 0x12	; 18
 1aa:	8f 3b       	cpi	r24, 0xBF	; 191
 1ac:	99 f1       	breq	.+102    	; 0x214 <LEE_TECLADO+0x6c>
 1ae:	20 f4       	brcc	.+8      	; 0x1b8 <LEE_TECLADO+0x10>
 1b0:	8f 37       	cpi	r24, 0x7F	; 127
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <LEE_TECLADO+0xe>
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <LEE_TECLADO+0x94>
 1b6:	56 c0       	rjmp	.+172    	; 0x264 <LEE_TECLADO+0xbc>
 1b8:	8f 3d       	cpi	r24, 0xDF	; 223
 1ba:	c1 f0       	breq	.+48     	; 0x1ec <LEE_TECLADO+0x44>
 1bc:	8f 3e       	cpi	r24, 0xEF	; 239
 1be:	09 f0       	breq	.+2      	; 0x1c2 <LEE_TECLADO+0x1a>
 1c0:	51 c0       	rjmp	.+162    	; 0x264 <LEE_TECLADO+0xbc>
	{
		case COL1:
		switch(PIND&0X0F)
 1c2:	80 b3       	in	r24, 0x10	; 16
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	8b 30       	cpi	r24, 0x0B	; 11
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <LEE_TECLADO+0x3c>
 1ca:	18 f4       	brcc	.+6      	; 0x1d2 <LEE_TECLADO+0x2a>
 1cc:	87 30       	cpi	r24, 0x07	; 7
 1ce:	61 f0       	breq	.+24     	; 0x1e8 <LEE_TECLADO+0x40>
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <LEE_TECLADO+0x34>
 1d2:	8d 30       	cpi	r24, 0x0D	; 13
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <LEE_TECLADO+0x38>
 1d6:	8e 30       	cpi	r24, 0x0E	; 14
 1d8:	09 f4       	brne	.+2      	; 0x1dc <LEE_TECLADO+0x34>
 1da:	46 c0       	rjmp	.+140    	; 0x268 <LEE_TECLADO+0xc0>
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	08 95       	ret
	{
		case COL1:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='1'; break;//0X0E
			case FIL2: VALOR_TECLADO='2'; break;//0X0D:
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	08 95       	ret
			case FIL3: VALOR_TECLADO='3'; break;//0X0B
 1e4:	83 e3       	ldi	r24, 0x33	; 51
 1e6:	08 95       	ret
			case FIL4: VALOR_TECLADO='A'; break;//0X07
 1e8:	81 e4       	ldi	r24, 0x41	; 65
 1ea:	08 95       	ret
		}
		break;
		
		case COL2:
		switch(PIND&0X0F)
 1ec:	80 b3       	in	r24, 0x10	; 16
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	8b 30       	cpi	r24, 0x0B	; 11
 1f2:	61 f0       	breq	.+24     	; 0x20c <LEE_TECLADO+0x64>
 1f4:	18 f4       	brcc	.+6      	; 0x1fc <LEE_TECLADO+0x54>
 1f6:	87 30       	cpi	r24, 0x07	; 7
 1f8:	59 f0       	breq	.+22     	; 0x210 <LEE_TECLADO+0x68>
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <LEE_TECLADO+0x5c>
 1fc:	8d 30       	cpi	r24, 0x0D	; 13
 1fe:	21 f0       	breq	.+8      	; 0x208 <LEE_TECLADO+0x60>
 200:	8e 30       	cpi	r24, 0x0E	; 14
 202:	a1 f1       	breq	.+104    	; 0x26c <LEE_TECLADO+0xc4>
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	08 95       	ret
		
		case COL2:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='4'; break;
			case FIL2: VALOR_TECLADO='5'; break;
 208:	85 e3       	ldi	r24, 0x35	; 53
 20a:	08 95       	ret
			case FIL3: VALOR_TECLADO='6'; break;
 20c:	86 e3       	ldi	r24, 0x36	; 54
 20e:	08 95       	ret
			case FIL4: VALOR_TECLADO='B'; break;
 210:	82 e4       	ldi	r24, 0x42	; 66
 212:	08 95       	ret
		}
		break;
		
		case COL3:
		switch(PIND&0X0F)
 214:	80 b3       	in	r24, 0x10	; 16
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	8b 30       	cpi	r24, 0x0B	; 11
 21a:	61 f0       	breq	.+24     	; 0x234 <LEE_TECLADO+0x8c>
 21c:	18 f4       	brcc	.+6      	; 0x224 <LEE_TECLADO+0x7c>
 21e:	87 30       	cpi	r24, 0x07	; 7
 220:	59 f0       	breq	.+22     	; 0x238 <LEE_TECLADO+0x90>
 222:	04 c0       	rjmp	.+8      	; 0x22c <LEE_TECLADO+0x84>
 224:	8d 30       	cpi	r24, 0x0D	; 13
 226:	21 f0       	breq	.+8      	; 0x230 <LEE_TECLADO+0x88>
 228:	8e 30       	cpi	r24, 0x0E	; 14
 22a:	11 f1       	breq	.+68     	; 0x270 <LEE_TECLADO+0xc8>
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	08 95       	ret
		
		case COL3:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='7'; break;
			case FIL2: VALOR_TECLADO='8'; break;
 230:	88 e3       	ldi	r24, 0x38	; 56
 232:	08 95       	ret
			case FIL3: VALOR_TECLADO='9'; break;
 234:	89 e3       	ldi	r24, 0x39	; 57
 236:	08 95       	ret
			case FIL4: VALOR_TECLADO='C'; break;
 238:	83 e4       	ldi	r24, 0x43	; 67
 23a:	08 95       	ret
		}
		break;
		
		case COL4:
		switch(PIND&0X0F)
 23c:	80 b3       	in	r24, 0x10	; 16
 23e:	8f 70       	andi	r24, 0x0F	; 15
 240:	8b 30       	cpi	r24, 0x0B	; 11
 242:	61 f0       	breq	.+24     	; 0x25c <LEE_TECLADO+0xb4>
 244:	18 f4       	brcc	.+6      	; 0x24c <LEE_TECLADO+0xa4>
 246:	87 30       	cpi	r24, 0x07	; 7
 248:	59 f0       	breq	.+22     	; 0x260 <LEE_TECLADO+0xb8>
 24a:	04 c0       	rjmp	.+8      	; 0x254 <LEE_TECLADO+0xac>
 24c:	8d 30       	cpi	r24, 0x0D	; 13
 24e:	21 f0       	breq	.+8      	; 0x258 <LEE_TECLADO+0xb0>
 250:	8e 30       	cpi	r24, 0x0E	; 14
 252:	81 f0       	breq	.+32     	; 0x274 <LEE_TECLADO+0xcc>
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 254:	80 e2       	ldi	r24, 0x20	; 32
 256:	08 95       	ret
		
		case COL4:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='*'; break;
			case FIL2: VALOR_TECLADO='0'; break;
 258:	80 e3       	ldi	r24, 0x30	; 48
 25a:	08 95       	ret
			case FIL3: VALOR_TECLADO='#'; break;
 25c:	83 e2       	ldi	r24, 0x23	; 35
 25e:	08 95       	ret
			case FIL4: VALOR_TECLADO='D'; break;
 260:	84 e4       	ldi	r24, 0x44	; 68
 262:	08 95       	ret
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	08 95       	ret
	switch(PORTD)
	{
		case COL1:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='1'; break;//0X0E
 268:	81 e3       	ldi	r24, 0x31	; 49
 26a:	08 95       	ret
		break;
		
		case COL2:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='4'; break;
 26c:	84 e3       	ldi	r24, 0x34	; 52
 26e:	08 95       	ret
		break;
		
		case COL3:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='7'; break;
 270:	87 e3       	ldi	r24, 0x37	; 55
 272:	08 95       	ret
		break;
		
		case COL4:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='*'; break;
 274:	8a e2       	ldi	r24, 0x2A	; 42
		}
	break;
	}
	
	return VALOR_TECLADO;
}
 276:	08 95       	ret

00000278 <BARRE_TECLADO>:

void BARRE_TECLADO()
{
	switch(PORTD)
 278:	82 b3       	in	r24, 0x12	; 18
 27a:	8f 3d       	cpi	r24, 0xDF	; 223
 27c:	41 f0       	breq	.+16     	; 0x28e <BARRE_TECLADO+0x16>
 27e:	8f 3e       	cpi	r24, 0xEF	; 239
 280:	19 f0       	breq	.+6      	; 0x288 <BARRE_TECLADO+0x10>
 282:	8f 3b       	cpi	r24, 0xBF	; 191
 284:	51 f4       	brne	.+20     	; 0x29a <BARRE_TECLADO+0x22>
 286:	06 c0       	rjmp	.+12     	; 0x294 <BARRE_TECLADO+0x1c>
	{
		case COL1: PORTD=COL2; break;
 288:	8f ed       	ldi	r24, 0xDF	; 223
 28a:	82 bb       	out	0x12, r24	; 18
 28c:	08 95       	ret
		case COL2: PORTD=COL3; break;
 28e:	8f eb       	ldi	r24, 0xBF	; 191
 290:	82 bb       	out	0x12, r24	; 18
 292:	08 95       	ret
		case COL3: PORTD=COL4; break;
 294:	8f e7       	ldi	r24, 0x7F	; 127
 296:	82 bb       	out	0x12, r24	; 18
 298:	08 95       	ret
		//case COL4: PORTD=COL1; break;
		default: PORTD=COL1;
 29a:	8f ee       	ldi	r24, 0xEF	; 239
 29c:	82 bb       	out	0x12, r24	; 18
 29e:	08 95       	ret

000002a0 <__vector_19>:
void ConfigIO();

char pressedKey = ' ';

ISR(TIMER0_COMP_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
	PORTB = PINB;
 2ac:	86 b3       	in	r24, 0x16	; 22
 2ae:	88 bb       	out	0x18, r24	; 24
}
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <ConfigIO>:
    }
}

void ConfigIO()
{
	cli();
 2bc:	f8 94       	cli
	DDRC = 0XFF;
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	84 bb       	out	0x14, r24	; 20
	DDRD = 0B11110000;
 2c2:	80 ef       	ldi	r24, 0xF0	; 240
 2c4:	81 bb       	out	0x11, r24	; 17
	DDRB |= (1<<DDB3);
 2c6:	bb 9a       	sbi	0x17, 3	; 23
	TCCR0 = (1<<WGM01)|(0<<WGM00)|(0<<COM01)|(1<<COM00);
 2c8:	88 e1       	ldi	r24, 0x18	; 24
 2ca:	83 bf       	out	0x33, r24	; 51
	TCCR0|= (1<<CS02)|(0<<CS01)|(0<<CS00); //PREESCALA 256
 2cc:	83 b7       	in	r24, 0x33	; 51
 2ce:	84 60       	ori	r24, 0x04	; 4
 2d0:	83 bf       	out	0x33, r24	; 51
	OCR0 = _DO;
 2d2:	8a e3       	ldi	r24, 0x3A	; 58
 2d4:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1<<OCIE0);
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	89 bf       	out	0x39, r24	; 57
	sei();
 2da:	78 94       	sei
 2dc:	08 95       	ret

000002de <RefreshLCDMessage>:
}
void RefreshLCDMessage(char note[4])
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
	LIMPIA_LCD();
 2e4:	0e 94 c8 00 	call	0x190	; 0x190 <LIMPIA_LCD>
	POS_LINEA1(START_MESSAGE_POS);
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	0e 94 cc 00 	call	0x198	; 0x198 <POS_LINEA1>
	ENVIA_CADENA(note);
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 b9 00 	call	0x172	; 0x172 <ENVIA_CADENA>
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <DisableSound>:
{
	OCR0 = value;
}
void DisableSound()
{
	cli();
 2fa:	f8 94       	cli
	PORTB = 0x00;
 2fc:	18 ba       	out	0x18, r1	; 24
	TCCR0&= ~(1<<COM00);//desactivar ctc mode
 2fe:	83 b7       	in	r24, 0x33	; 51
 300:	8f 7e       	andi	r24, 0xEF	; 239
 302:	83 bf       	out	0x33, r24	; 51
 304:	08 95       	ret

00000306 <EnableSound>:
}
void EnableSound()
{
	TCCR0|=(1<<COM00);//activar ctc mode
 306:	83 b7       	in	r24, 0x33	; 51
 308:	80 61       	ori	r24, 0x10	; 16
 30a:	83 bf       	out	0x33, r24	; 51
	sei();
 30c:	78 94       	sei
 30e:	08 95       	ret

00000310 <main>:
{
	PORTB = PINB;
}
int main(void)
{
	ConfigIO();
 310:	0e 94 5e 01 	call	0x2bc	; 0x2bc <ConfigIO>
	DisableSound();
 314:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DisableSound>
	LCD_INICIALIZA(); //INICIALIZAR LCD
 318:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_INICIALIZA>
	APAGAR_CURSOR();
 31c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <APAGAR_CURSOR>
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 320:	d0 e0       	ldi	r29, 0x00	; 0
 322:	c0 e0       	ldi	r28, 0x00	; 0
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 324:	0f 2e       	mov	r0, r31
 326:	fe e1       	ldi	r31, 0x1E	; 30
 328:	7f 2e       	mov	r7, r31
 32a:	f0 2d       	mov	r31, r0
 32c:	68 94       	set
 32e:	88 24       	eor	r8, r8
 330:	85 f8       	bld	r8, 5
 332:	0f 2e       	mov	r0, r31
 334:	f2 e2       	ldi	r31, 0x22	; 34
 336:	9f 2e       	mov	r9, r31
 338:	f0 2d       	mov	r31, r0
 33a:	0f 2e       	mov	r0, r31
 33c:	f4 e2       	ldi	r31, 0x24	; 36
 33e:	af 2e       	mov	r10, r31
 340:	f0 2d       	mov	r31, r0
 342:	0f 2e       	mov	r0, r31
 344:	f6 e2       	ldi	r31, 0x26	; 38
 346:	bf 2e       	mov	r11, r31
 348:	f0 2d       	mov	r31, r0
 34a:	0f 2e       	mov	r0, r31
 34c:	f8 e2       	ldi	r31, 0x28	; 40
 34e:	cf 2e       	mov	r12, r31
 350:	f0 2d       	mov	r31, r0
 352:	0f 2e       	mov	r0, r31
 354:	fb e2       	ldi	r31, 0x2B	; 43
 356:	df 2e       	mov	r13, r31
 358:	f0 2d       	mov	r31, r0
 35a:	0f 2e       	mov	r0, r31
 35c:	fe e2       	ldi	r31, 0x2E	; 46
 35e:	ef 2e       	mov	r14, r31
 360:	f0 2d       	mov	r31, r0
 362:	0f 2e       	mov	r0, r31
 364:	f1 e3       	ldi	r31, 0x31	; 49
 366:	ff 2e       	mov	r15, r31
 368:	f0 2d       	mov	r31, r0
 36a:	04 e3       	ldi	r16, 0x34	; 52
 36c:	17 e3       	ldi	r17, 0x37	; 55
 36e:	0f 2e       	mov	r0, r31
 370:	fa e3       	ldi	r31, 0x3A	; 58
 372:	6f 2e       	mov	r6, r31
 374:	f0 2d       	mov	r31, r0
 376:	0c c0       	rjmp	.+24     	; 0x390 <main+0x80>
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
		{
			BARRE_TECLADO();
 378:	0e 94 3c 01 	call	0x278	; 0x278 <BARRE_TECLADO>
			pressedKey = LEE_TECLADO();
 37c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LEE_TECLADO>
 380:	80 93 60 00 	sts	0x0060, r24
			if(pressedKey!=' ')
 384:	80 32       	cpi	r24, 0x20	; 32
 386:	19 f0       	breq	.+6      	; 0x38e <main+0x7e>
			{
				EnableSound();
 388:	0e 94 83 01 	call	0x306	; 0x306 <EnableSound>
				break;
 38c:	03 c0       	rjmp	.+6      	; 0x394 <main+0x84>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 38e:	df 5f       	subi	r29, 0xFF	; 255
 390:	d4 30       	cpi	r29, 0x04	; 4
 392:	90 f3       	brcs	.-28     	; 0x378 <main+0x68>
				EnableSound();
				break;
			}
		}
		
		switch(pressedKey)
 394:	80 91 60 00 	lds	r24, 0x0060
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	f1 97       	sbiw	r30, 0x31	; 49
 39e:	e3 31       	cpi	r30, 0x13	; 19
 3a0:	f1 05       	cpc	r31, r1
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <main+0x96>
 3a4:	5a c0       	rjmp	.+180    	; 0x45a <main+0x14a>
 3a6:	e6 5d       	subi	r30, 0xD6	; 214
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	0c 94 31 02 	jmp	0x462	; 0x462 <__tablejump2__>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 3ae:	6c be       	out	0x3c, r6	; 60
		
		switch(pressedKey)
		{
			case '1':
				ChangeNote(_DO);
				RefreshLCDMessage("Do");
 3b0:	81 e6       	ldi	r24, 0x61	; 97
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
				EnableSound();
 3b8:	0e 94 83 01 	call	0x306	; 0x306 <EnableSound>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 3bc:	dc 2f       	mov	r29, r28
		{
			case '1':
				ChangeNote(_DO);
				RefreshLCDMessage("Do");
				EnableSound();
			break;
 3be:	e8 cf       	rjmp	.-48     	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 3c0:	1c bf       	out	0x3c, r17	; 60
				EnableSound();
			break;
			
			case '2':
				ChangeNote(_DO_S);
				RefreshLCDMessage("Do#");
 3c2:	84 e6       	ldi	r24, 0x64	; 100
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 3ca:	dc 2f       	mov	r29, r28
			break;
			
			case '2':
				ChangeNote(_DO_S);
				RefreshLCDMessage("Do#");
			break;
 3cc:	e1 cf       	rjmp	.-62     	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 3ce:	0c bf       	out	0x3c, r16	; 60
				RefreshLCDMessage("Do#");
			break;
			
			case '3':
				ChangeNote(_RE);
				RefreshLCDMessage("Re");
 3d0:	88 e6       	ldi	r24, 0x68	; 104
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 3d8:	dc 2f       	mov	r29, r28
			break;
			
			case '3':
				ChangeNote(_RE);
				RefreshLCDMessage("Re");
			break;
 3da:	da cf       	rjmp	.-76     	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 3dc:	fc be       	out	0x3c, r15	; 60
				RefreshLCDMessage("Re");
			break;
			
			case 'A':
				ChangeNote(_RE_S);
				RefreshLCDMessage("Re#");
 3de:	8b e6       	ldi	r24, 0x6B	; 107
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 3e6:	dc 2f       	mov	r29, r28
			break;
			
			case 'A':
				ChangeNote(_RE_S);
				RefreshLCDMessage("Re#");
			break;
 3e8:	d3 cf       	rjmp	.-90     	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 3ea:	ec be       	out	0x3c, r14	; 60
				RefreshLCDMessage("Re#");
			break;
			
			case '4':
				ChangeNote(_MI);
				RefreshLCDMessage("Mi");
 3ec:	8f e6       	ldi	r24, 0x6F	; 111
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 3f4:	dc 2f       	mov	r29, r28
			break;
			
			case '4':
				ChangeNote(_MI);
				RefreshLCDMessage("Mi");
			break;
 3f6:	cc cf       	rjmp	.-104    	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 3f8:	dc be       	out	0x3c, r13	; 60
				RefreshLCDMessage("Mi");
			break;
			
			case '5':
				ChangeNote(_FA);
				RefreshLCDMessage("Fa");
 3fa:	82 e7       	ldi	r24, 0x72	; 114
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 402:	dc 2f       	mov	r29, r28
			break;
			
			case '5':
				ChangeNote(_FA);
				RefreshLCDMessage("Fa");
			break;
 404:	c5 cf       	rjmp	.-118    	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 406:	cc be       	out	0x3c, r12	; 60
				RefreshLCDMessage("Fa");
			break;
			
			case '6':
				ChangeNote(_FA_S);
				RefreshLCDMessage("FA#");
 408:	85 e7       	ldi	r24, 0x75	; 117
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 410:	dc 2f       	mov	r29, r28
			break;
			
			case '6':
				ChangeNote(_FA_S);
				RefreshLCDMessage("FA#");
			break;
 412:	be cf       	rjmp	.-132    	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 414:	bc be       	out	0x3c, r11	; 60
				RefreshLCDMessage("FA#");
			break;
			
			case 'B':
				ChangeNote(_SOL);
				RefreshLCDMessage("Sol");
 416:	89 e7       	ldi	r24, 0x79	; 121
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 41e:	dc 2f       	mov	r29, r28
			break;
			
			case 'B':
				ChangeNote(_SOL);
				RefreshLCDMessage("Sol");
			break;
 420:	b7 cf       	rjmp	.-146    	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 422:	ac be       	out	0x3c, r10	; 60
				RefreshLCDMessage("Sol");
			break;
			
			case '7':
				ChangeNote(_SOL_S);
				RefreshLCDMessage("Sol#");
 424:	8d e7       	ldi	r24, 0x7D	; 125
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 42c:	dc 2f       	mov	r29, r28
			break;
			
			case '7':
				ChangeNote(_SOL_S);
				RefreshLCDMessage("Sol#");
			break;
 42e:	b0 cf       	rjmp	.-160    	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 430:	9c be       	out	0x3c, r9	; 60
				RefreshLCDMessage("Sol#");
			break;
			
			case '8':
				ChangeNote(_LA);
				RefreshLCDMessage("La");
 432:	82 e8       	ldi	r24, 0x82	; 130
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 43a:	dc 2f       	mov	r29, r28
			break;
			
			case '8':
				ChangeNote(_LA);
				RefreshLCDMessage("La");
			break;
 43c:	a9 cf       	rjmp	.-174    	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 43e:	8c be       	out	0x3c, r8	; 60
				RefreshLCDMessage("La");
			break;
			
			case '9':
				ChangeNote(_LA_S);
				RefreshLCDMessage("La#");
 440:	85 e8       	ldi	r24, 0x85	; 133
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 448:	dc 2f       	mov	r29, r28
			break;
			
			case '9':
				ChangeNote(_LA_S);
				RefreshLCDMessage("La#");
			break;
 44a:	a2 cf       	rjmp	.-188    	; 0x390 <main+0x80>
	POS_LINEA1(START_MESSAGE_POS);
	ENVIA_CADENA(note);
}
void ChangeNote(uint8_t value)
{
	OCR0 = value;
 44c:	7c be       	out	0x3c, r7	; 60
				RefreshLCDMessage("La#");
			break;
			
			case 'C':
				ChangeNote(_SI);
				RefreshLCDMessage("Si");
 44e:	89 e8       	ldi	r24, 0x89	; 137
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 6f 01 	call	0x2de	; 0x2de <RefreshLCDMessage>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 456:	dc 2f       	mov	r29, r28
			break;
			
			case 'C':
				ChangeNote(_SI);
				RefreshLCDMessage("Si");
			break;
 458:	9b cf       	rjmp	.-202    	; 0x390 <main+0x80>
			
			default:
				DisableSound();
 45a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DisableSound>
	LCD_INICIALIZA(); //INICIALIZAR LCD
	APAGAR_CURSOR();
	
    while(1)
    {
		for (uint8_t i =0;i<4;i++)
 45e:	dc 2f       	mov	r29, r28
				RefreshLCDMessage("Si");
			break;
			
			default:
				DisableSound();
			break;
 460:	97 cf       	rjmp	.-210    	; 0x390 <main+0x80>

00000462 <__tablejump2__>:
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31

00000466 <__tablejump__>:
 466:	05 90       	lpm	r0, Z+
 468:	f4 91       	lpm	r31, Z
 46a:	e0 2d       	mov	r30, r0
 46c:	09 94       	ijmp

0000046e <_exit>:
 46e:	f8 94       	cli

00000470 <__stop_program>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stop_program>
