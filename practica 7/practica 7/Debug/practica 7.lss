
practica 7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000b30  00000ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000160  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000020f7  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000507  00000000  00000000  00002e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000099b  00000000  00000000  00003376  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000328  00000000  00000000  00003d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000447  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b1b  00000000  00000000  00004483  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000130  00000000  00000000  00004f9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_19>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  7a:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_19>:

bool IsNumber(char x);
uint8_t StringToUint8(char* array, uint8_t length);

ISR(TIMER0_COMP_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	PORTB=PINB;
  8e:	86 b3       	in	r24, 0x16	; 22
  90:	88 bb       	out	0x18, r24	; 24
}
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <ConfigIO>:
    }
}

void ConfigIO()
{
	cli();
  9e:	f8 94       	cli
	DDRC = 0XFF; //lcd
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 bb       	out	0x14, r24	; 20
	DDRD = 0B11110000;//teclado
  a4:	90 ef       	ldi	r25, 0xF0	; 240
  a6:	91 bb       	out	0x11, r25	; 17
	DDRB = 0xff;  //motor
  a8:	87 bb       	out	0x17, r24	; 23

	TCCR0 |= (0<<WGM01)|(1<<WGM00)|(1<<COM01)|(0<<COM00); // CTC
  aa:	83 b7       	in	r24, 0x33	; 51
  ac:	80 66       	ori	r24, 0x60	; 96
  ae:	83 bf       	out	0x33, r24	; 51
	TCCR0|= (0<<CS02)|(0<<CS01)|(1<<CS00);//no prescaling N=1
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	83 bf       	out	0x33, r24	; 51
	OCR0 = 128; // PRELOAD DUTY CYCLE
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	8c bf       	out	0x3c, r24	; 60
	
	TIMSK |= (1<<OCIE0);//OUTPUT COMPARE INTERRUPT ENABLE
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	89 bf       	out	0x39, r24	; 57
	 
	sei();
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <StringToUint8>:
uint8_t StringToUint8(char* array, uint8_t length)
{
	uint8_t result = 0;
	uint16_t resultAux = 0;
	
	switch(length)
  c4:	62 30       	cpi	r22, 0x02	; 2
  c6:	51 f0       	breq	.+20     	; 0xdc <StringToUint8+0x18>
  c8:	63 30       	cpi	r22, 0x03	; 3
  ca:	01 f1       	breq	.+64     	; 0x10c <StringToUint8+0x48>
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	09 f0       	breq	.+2      	; 0xd2 <StringToUint8+0xe>
  d0:	41 c0       	rjmp	.+130    	; 0x154 <StringToUint8+0x90>
	{
		case 1:
		resultAux = ((array[0]-48)*1);
  d2:	fc 01       	movw	r30, r24
  d4:	80 81       	ld	r24, Z
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	c0 97       	sbiw	r24, 0x30	; 48
		break;
  da:	3e c0       	rjmp	.+124    	; 0x158 <StringToUint8+0x94>
		
		case 2:
		resultAux = ((array[0]-48)*10)+((array[1]-48)*1);
  dc:	fc 01       	movw	r30, r24
  de:	20 81       	ld	r18, Z
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	20 53       	subi	r18, 0x30	; 48
  e4:	31 09       	sbc	r19, r1
  e6:	a9 01       	movw	r20, r18
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	24 0f       	add	r18, r20
  fa:	35 1f       	adc	r19, r21
  fc:	41 81       	ldd	r20, Z+1	; 0x01
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	40 53       	subi	r20, 0x30	; 48
 102:	51 09       	sbc	r21, r1
 104:	c9 01       	movw	r24, r18
 106:	84 0f       	add	r24, r20
 108:	95 1f       	adc	r25, r21
		break;
 10a:	26 c0       	rjmp	.+76     	; 0x158 <StringToUint8+0x94>
		
		case 3:
		resultAux = ((array[0]-48)*100)+((array[1]-48)*10)+((array[2]-48)*1);
 10c:	fc 01       	movw	r30, r24
 10e:	20 81       	ld	r18, Z
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	20 53       	subi	r18, 0x30	; 48
 114:	31 09       	sbc	r19, r1
 116:	64 e6       	ldi	r22, 0x64	; 100
 118:	62 9f       	mul	r22, r18
 11a:	a0 01       	movw	r20, r0
 11c:	63 9f       	mul	r22, r19
 11e:	50 0d       	add	r21, r0
 120:	11 24       	eor	r1, r1
 122:	21 81       	ldd	r18, Z+1	; 0x01
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	20 53       	subi	r18, 0x30	; 48
 128:	31 09       	sbc	r19, r1
 12a:	b9 01       	movw	r22, r18
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	26 0f       	add	r18, r22
 13e:	37 1f       	adc	r19, r23
 140:	24 0f       	add	r18, r20
 142:	35 1f       	adc	r19, r21
 144:	42 81       	ldd	r20, Z+2	; 0x02
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	40 53       	subi	r20, 0x30	; 48
 14a:	51 09       	sbc	r21, r1
 14c:	c9 01       	movw	r24, r18
 14e:	84 0f       	add	r24, r20
 150:	95 1f       	adc	r25, r21
		break;
 152:	02 c0       	rjmp	.+4      	; 0x158 <StringToUint8+0x94>
}

uint8_t StringToUint8(char* array, uint8_t length)
{
	uint8_t result = 0;
	uint16_t resultAux = 0;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
		case 3:
		resultAux = ((array[0]-48)*100)+((array[1]-48)*10)+((array[2]-48)*1);
		break;
	}
	
	if(resultAux>255)
 158:	8f 3f       	cpi	r24, 0xFF	; 255
 15a:	91 05       	cpc	r25, r1
 15c:	11 f0       	breq	.+4      	; 0x162 <StringToUint8+0x9e>
 15e:	08 f0       	brcs	.+2      	; 0x162 <StringToUint8+0x9e>
	{
		result = 255;
 160:	8f ef       	ldi	r24, 0xFF	; 255
	{
		result = (uint8_t)resultAux;
	}
	
	return result;
 162:	08 95       	ret

00000164 <main>:
{
	PORTB=PINB;
}

int main(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	29 97       	sbiw	r28, 0x09	; 9
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	uint8_t state = IDLE_STATE;
	char pressedKey = ' ';
	char num1[4] = "0000"; //CHAR ARRAY PARA NÚMERO 1
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	90 e3       	ldi	r25, 0x30	; 48
 17c:	dc 01       	movw	r26, r24
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	9a 83       	std	Y+2, r25	; 0x02
 182:	ab 83       	std	Y+3, r26	; 0x03
 184:	bc 83       	std	Y+4, r27	; 0x04
	uint8_t val1 = 0;
	uint8_t num1Index = 0;
	char texto[5]="\0";
 186:	80 91 60 00 	lds	r24, 0x0060
 18a:	90 91 61 00 	lds	r25, 0x0061
 18e:	9e 83       	std	Y+6, r25	; 0x06
 190:	8d 83       	std	Y+5, r24	; 0x05
 192:	1f 82       	std	Y+7, r1	; 0x07
 194:	18 86       	std	Y+8, r1	; 0x08
 196:	19 86       	std	Y+9, r1	; 0x09
	ConfigIO();
 198:	0e 94 4f 00 	call	0x9e	; 0x9e <ConfigIO>
	LCD_INICIALIZA(); //INICIALIZAR LCD
 19c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LCD_INICIALIZA>
	POS_LINEA1(0);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 3d 02 	call	0x47a	; 0x47a <POS_LINEA1>
	ENVIA_CADENA(MESSAGE_1);
 1a6:	8b e6       	ldi	r24, 0x6B	; 107
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 2a 02 	call	0x454	; 0x454 <ENVIA_CADENA>
	POS_LINEA2(0);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 41 02 	call	0x482	; 0x482 <POS_LINEA2>
	ENVIA_CADENA(MESSAGE_2);
 1b4:	85 e6       	ldi	r24, 0x65	; 101
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 2a 02 	call	0x454	; 0x454 <ENVIA_CADENA>
	APAGAR_CURSOR();
 1bc:	0e 94 45 02 	call	0x48a	; 0x48a <APAGAR_CURSOR>
{
	uint8_t state = IDLE_STATE;
	char pressedKey = ' ';
	char num1[4] = "0000"; //CHAR ARRAY PARA NÚMERO 1
	uint8_t val1 = 0;
	uint8_t num1Index = 0;
 1c0:	00 e0       	ldi	r16, 0x00	; 0
int main(void)
{
	uint8_t state = IDLE_STATE;
	char pressedKey = ' ';
	char num1[4] = "0000"; //CHAR ARRAY PARA NÚMERO 1
	uint8_t val1 = 0;
 1c2:	b1 2c       	mov	r11, r1
	PORTB=PINB;
}

int main(void)
{
	uint8_t state = IDLE_STATE;
 1c4:	10 e0       	ldi	r17, 0x00	; 0
				
			break;
			
			case SET_DUTY_CYCLE:
				OCR0 = val1;//set duty cycle
				state = CHANGE_SCREEN;				
 1c6:	0f 2e       	mov	r0, r31
 1c8:	f3 e0       	ldi	r31, 0x03	; 3
 1ca:	7f 2e       	mov	r7, r31
 1cc:	f0 2d       	mov	r31, r0
			
				POS_LINEA1(CURRENT_DC_LOC);//-------
				ENVIA_CADENA("    ");// lIMPIAR EL DC ANTERIOR EN PANTALLA
				
				POS_LINEA1(CURRENT_DC_LOC);//POSICIONAR CURSOR
				sprintf(texto,"%d",val1);
 1ce:	0f 2e       	mov	r0, r31
 1d0:	f5 e7       	ldi	r31, 0x75	; 117
 1d2:	ef 2e       	mov	r14, r31
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ff 2e       	mov	r15, r31
 1d8:	f0 2d       	mov	r31, r0
 1da:	1e 01       	movw	r2, r28
 1dc:	25 e0       	ldi	r18, 0x05	; 5
 1de:	22 0e       	add	r2, r18
 1e0:	31 1c       	adc	r3, r1
				ENVIA_CADENA(texto);//ACTUALIZAR VALOR DEL DC EN PANTALLA
				
				state = RESTART_STATE;
 1e2:	0f 2e       	mov	r0, r31
 1e4:	f7 e0       	ldi	r31, 0x07	; 7
 1e6:	8f 2e       	mov	r8, r31
 1e8:	f0 2d       	mov	r31, r0
				state = IDLE_STATE;
				_delay_ms(WAIT_PRESS_KEY);
				
				
				val1 = 0;
				num1Index = 0;
 1ea:	c1 2c       	mov	r12, r1
		switch(state)
		{
			case IDLE_STATE:
				POS_LINEA1(CURRENT_DC_LOC);
				POS_LINEA2(NEW_DC_LOC);
				state = GET_DUTY_CYCLE;
 1ec:	99 24       	eor	r9, r9
 1ee:	93 94       	inc	r9
				}
				else if(pressedKey == 'A')//tecla aceptar
				{
					_delay_ms(WAIT_PRESS_KEY);
					val1 = StringToUint8(num1,num1Index);
					state = SET_DUTY_CYCLE;
 1f0:	68 94       	set
 1f2:	66 24       	eor	r6, r6
 1f4:	61 f8       	bld	r6, 1
						CURSOR_IZQ_CORRE();
						_delay_ms(WAIT_PROCESS);
						ENVIA_CADENA(" ");
						_delay_ms(WAIT_PROCESS);
						CURSOR_IZQ_CORRE();
						num1[num1Index] = '0';
 1f6:	0f 2e       	mov	r0, r31
 1f8:	f0 e3       	ldi	r31, 0x30	; 48
 1fa:	5f 2e       	mov	r5, r31
 1fc:	f0 2d       	mov	r31, r0
	APAGAR_CURSOR();
	
    /* Replace with your application code */
    while (1) 
    {
		switch(state)
 1fe:	12 30       	cpi	r17, 0x02	; 2
 200:	09 f4       	brne	.+2      	; 0x204 <main+0xa0>
 202:	83 c0       	rjmp	.+262    	; 0x30a <main+0x1a6>
 204:	28 f4       	brcc	.+10     	; 0x210 <main+0xac>
 206:	11 23       	and	r17, r17
 208:	51 f0       	breq	.+20     	; 0x21e <main+0xba>
 20a:	11 30       	cpi	r17, 0x01	; 1
 20c:	81 f0       	breq	.+32     	; 0x22e <main+0xca>
 20e:	f7 cf       	rjmp	.-18     	; 0x1fe <main+0x9a>
 210:	13 30       	cpi	r17, 0x03	; 3
 212:	09 f4       	brne	.+2      	; 0x216 <main+0xb2>
 214:	7d c0       	rjmp	.+250    	; 0x310 <main+0x1ac>
 216:	17 30       	cpi	r17, 0x07	; 7
 218:	09 f4       	brne	.+2      	; 0x21c <main+0xb8>
 21a:	a0 c0       	rjmp	.+320    	; 0x35c <main+0x1f8>
 21c:	f0 cf       	rjmp	.-32     	; 0x1fe <main+0x9a>
		{
			case IDLE_STATE:
				POS_LINEA1(CURRENT_DC_LOC);
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	0e 94 3d 02 	call	0x47a	; 0x47a <POS_LINEA1>
				POS_LINEA2(NEW_DC_LOC);
 224:	8b e0       	ldi	r24, 0x0B	; 11
 226:	0e 94 41 02 	call	0x482	; 0x482 <POS_LINEA2>
				state = GET_DUTY_CYCLE;
 22a:	19 2d       	mov	r17, r9
			break;
 22c:	e8 cf       	rjmp	.-48     	; 0x1fe <main+0x9a>
			
			case GET_DUTY_CYCLE:
				BARRE_TECLADO();
 22e:	0e 94 b1 02 	call	0x562	; 0x562 <BARRE_TECLADO>
				pressedKey = LEE_TECLADO();
 232:	0e 94 49 02 	call	0x492	; 0x492 <LEE_TECLADO>
}

bool IsNumber(char x)
{
	bool result = false;
	if((x>=0x30)&(x<=0x39))
 236:	20 ed       	ldi	r18, 0xD0	; 208
 238:	28 0f       	add	r18, r24
 23a:	99 2d       	mov	r25, r9
 23c:	2a 30       	cpi	r18, 0x0A	; 10
 23e:	08 f0       	brcs	.+2      	; 0x242 <main+0xde>
 240:	9c 2d       	mov	r25, r12
			
			case GET_DUTY_CYCLE:
				BARRE_TECLADO();
				pressedKey = LEE_TECLADO();
			
				if((IsNumber(pressedKey))&(num1Index < 3))//Comprobar num presionado
 242:	99 23       	and	r25, r25
 244:	d1 f0       	breq	.+52     	; 0x27a <main+0x116>
 246:	99 2d       	mov	r25, r9
 248:	03 30       	cpi	r16, 0x03	; 3
 24a:	08 f0       	brcs	.+2      	; 0x24e <main+0xea>
 24c:	9c 2d       	mov	r25, r12
 24e:	99 23       	and	r25, r25
 250:	a1 f0       	breq	.+40     	; 0x27a <main+0x116>
				{
					//LIMPIA_LCD();
					//REGRESO_CASA();
					num1[num1Index] = pressedKey;
 252:	e1 e0       	ldi	r30, 0x01	; 1
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ec 0f       	add	r30, r28
 258:	fd 1f       	adc	r31, r29
 25a:	e0 0f       	add	r30, r16
 25c:	f1 1d       	adc	r31, r1
 25e:	80 83       	st	Z, r24
					//num1[num1Index+1] = '\0';
					ENVIA_DATO(pressedKey);
 260:	0e 94 ff 01 	call	0x3fe	; 0x3fe <ENVIA_DATO>
					num1Index++;
 264:	0f 5f       	subi	r16, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f e7       	ldi	r24, 0x7F	; 127
 268:	98 e3       	ldi	r25, 0x38	; 56
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	20 40       	sbci	r18, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x108>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x112>
 276:	00 00       	nop
 278:	c2 cf       	rjmp	.-124    	; 0x1fe <main+0x9a>
					_delay_ms(WAIT_PRESS_KEY);
				}
				else if(pressedKey == '#') //borrar
 27a:	83 32       	cpi	r24, 0x23	; 35
 27c:	49 f5       	brne	.+82     	; 0x2d0 <main+0x16c>
				{
					if(num1Index>0)
 27e:	00 23       	and	r16, r16
 280:	09 f4       	brne	.+2      	; 0x284 <main+0x120>
 282:	bd cf       	rjmp	.-134    	; 0x1fe <main+0x9a>
					{
						CURSOR_IZQ_CORRE();
 284:	0e 94 39 02 	call	0x472	; 0x472 <CURSOR_IZQ_CORRE>
 288:	81 ee       	ldi	r24, 0xE1	; 225
 28a:	94 e0       	ldi	r25, 0x04	; 4
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x128>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x12e>
 292:	00 00       	nop
						_delay_ms(WAIT_PROCESS);
						ENVIA_CADENA(" ");
 294:	83 e7       	ldi	r24, 0x73	; 115
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 2a 02 	call	0x454	; 0x454 <ENVIA_CADENA>
 29c:	81 ee       	ldi	r24, 0xE1	; 225
 29e:	94 e0       	ldi	r25, 0x04	; 4
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x13c>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x142>
 2a6:	00 00       	nop
						_delay_ms(WAIT_PROCESS);
						CURSOR_IZQ_CORRE();
 2a8:	0e 94 39 02 	call	0x472	; 0x472 <CURSOR_IZQ_CORRE>
						num1[num1Index] = '0';
 2ac:	e1 e0       	ldi	r30, 0x01	; 1
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ec 0f       	add	r30, r28
 2b2:	fd 1f       	adc	r31, r29
 2b4:	e0 0f       	add	r30, r16
 2b6:	f1 1d       	adc	r31, r1
 2b8:	50 82       	st	Z, r5
						num1Index--;
 2ba:	01 50       	subi	r16, 0x01	; 1
 2bc:	9f e7       	ldi	r25, 0x7F	; 127
 2be:	28 e3       	ldi	r18, 0x38	; 56
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	91 50       	subi	r25, 0x01	; 1
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0x15e>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x168>
 2cc:	00 00       	nop
 2ce:	97 cf       	rjmp	.-210    	; 0x1fe <main+0x9a>
						_delay_ms(WAIT_PRESS_KEY);
					}
				}
				else if(pressedKey == 'A')//tecla aceptar
 2d0:	81 34       	cpi	r24, 0x41	; 65
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0x172>
 2d4:	94 cf       	rjmp	.-216    	; 0x1fe <main+0x9a>
 2d6:	9f e7       	ldi	r25, 0x7F	; 127
 2d8:	28 e3       	ldi	r18, 0x38	; 56
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	91 50       	subi	r25, 0x01	; 1
 2de:	20 40       	sbci	r18, 0x00	; 0
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x178>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x182>
 2e6:	00 00       	nop
				{
					_delay_ms(WAIT_PRESS_KEY);
					val1 = StringToUint8(num1,num1Index);
 2e8:	60 2f       	mov	r22, r16
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 62 00 	call	0xc4	; 0xc4 <StringToUint8>
 2f2:	b8 2e       	mov	r11, r24
 2f4:	9f e7       	ldi	r25, 0x7F	; 127
 2f6:	28 e3       	ldi	r18, 0x38	; 56
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	20 40       	sbci	r18, 0x00	; 0
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x196>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x1a0>
 304:	00 00       	nop
					state = SET_DUTY_CYCLE;
 306:	16 2d       	mov	r17, r6
 308:	7a cf       	rjmp	.-268    	; 0x1fe <main+0x9a>
				}
				
			break;
			
			case SET_DUTY_CYCLE:
				OCR0 = val1;//set duty cycle
 30a:	bc be       	out	0x3c, r11	; 60
				state = CHANGE_SCREEN;				
 30c:	17 2d       	mov	r17, r7
			break;
 30e:	77 cf       	rjmp	.-274    	; 0x1fe <main+0x9a>
			
			case CHANGE_SCREEN:
			
				POS_LINEA1(CURRENT_DC_LOC);//-------
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	0e 94 3d 02 	call	0x47a	; 0x47a <POS_LINEA1>
				ENVIA_CADENA("    ");// lIMPIAR EL DC ANTERIOR EN PANTALLA
 316:	80 e7       	ldi	r24, 0x70	; 112
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 2a 02 	call	0x454	; 0x454 <ENVIA_CADENA>
				
				POS_LINEA1(CURRENT_DC_LOC);//POSICIONAR CURSOR
 31e:	85 e0       	ldi	r24, 0x05	; 5
 320:	0e 94 3d 02 	call	0x47a	; 0x47a <POS_LINEA1>
				sprintf(texto,"%d",val1);
 324:	1f 92       	push	r1
 326:	bf 92       	push	r11
 328:	ff 92       	push	r15
 32a:	ef 92       	push	r14
 32c:	3f 92       	push	r3
 32e:	2f 92       	push	r2
 330:	0e 94 c5 02 	call	0x58a	; 0x58a <sprintf>
				ENVIA_CADENA(texto);//ACTUALIZAR VALOR DEL DC EN PANTALLA
 334:	c1 01       	movw	r24, r2
 336:	0e 94 2a 02 	call	0x454	; 0x454 <ENVIA_CADENA>
 33a:	9f e7       	ldi	r25, 0x7F	; 127
 33c:	28 e3       	ldi	r18, 0x38	; 56
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	91 50       	subi	r25, 0x01	; 1
 342:	20 40       	sbci	r18, 0x00	; 0
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x1dc>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x1e6>
 34a:	00 00       	nop
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
				
				state = RESTART_STATE;
 358:	18 2d       	mov	r17, r8
 35a:	51 cf       	rjmp	.-350    	; 0x1fe <main+0x9a>
			
			case RESET_STATE:
			break;
			
			case RESTART_STATE:
				POS_LINEA2(NEW_DC_LOC);//-------
 35c:	8b e0       	ldi	r24, 0x0B	; 11
 35e:	0e 94 41 02 	call	0x482	; 0x482 <POS_LINEA2>
				ENVIA_CADENA("    ");// lIMPIAR EL DC ANTERIOR EN PANTALLA
 362:	80 e7       	ldi	r24, 0x70	; 112
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 2a 02 	call	0x454	; 0x454 <ENVIA_CADENA>
				
				POS_LINEA2(NEW_DC_LOC);//RECOLOCAR PUNTERO DE PANTALLA
 36a:	8b e0       	ldi	r24, 0x0B	; 11
 36c:	0e 94 41 02 	call	0x482	; 0x482 <POS_LINEA2>
 370:	9f e7       	ldi	r25, 0x7F	; 127
 372:	28 e3       	ldi	r18, 0x38	; 56
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	91 50       	subi	r25, 0x01	; 1
 378:	20 40       	sbci	r18, 0x00	; 0
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x212>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x21c>
 380:	00 00       	nop
				state = IDLE_STATE;
				_delay_ms(WAIT_PRESS_KEY);
				
				
				val1 = 0;
				num1Index = 0;
 382:	0c 2d       	mov	r16, r12
				POS_LINEA2(NEW_DC_LOC);//RECOLOCAR PUNTERO DE PANTALLA
				state = IDLE_STATE;
				_delay_ms(WAIT_PRESS_KEY);
				
				
				val1 = 0;
 384:	bc 2c       	mov	r11, r12
			case RESTART_STATE:
				POS_LINEA2(NEW_DC_LOC);//-------
				ENVIA_CADENA("    ");// lIMPIAR EL DC ANTERIOR EN PANTALLA
				
				POS_LINEA2(NEW_DC_LOC);//RECOLOCAR PUNTERO DE PANTALLA
				state = IDLE_STATE;
 386:	1c 2d       	mov	r17, r12
				_delay_ms(WAIT_PRESS_KEY);
				
				
				val1 = 0;
				num1Index = 0;
			break;
 388:	3a cf       	rjmp	.-396    	; 0x1fe <main+0x9a>

0000038a <ENVIA_CMD>:

void ENVIA_CMD(char dato)
{
	char cmd_enviar;
	
	cmd_enviar =	(dato & 0xF0);      // se envia el nibble alto
 38a:	98 2f       	mov	r25, r24
 38c:	90 7f       	andi	r25, 0xF0	; 240
	LCD_PUERTO =  cmd_enviar;       // al puerto
 38e:	95 bb       	out	0x15, r25	; 21
	LCD_PUERTO &=~(1<<LCD_RS);  //  RS = 0
 390:	aa 98       	cbi	0x15, 2	; 21
	LCD_PUERTO |= (1<<LCD_E);   //   E = 1
 392:	ab 9a       	sbi	0x15, 3	; 21
 394:	e9 ef       	ldi	r30, 0xF9	; 249
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <ENVIA_CMD+0xe>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <ENVIA_CMD+0x14>
 39e:	00 00       	nop
	_delay_ms(1);
	LCD_PUERTO &=~(1<<LCD_E);   //   E = 0
 3a0:	ab 98       	cbi	0x15, 3	; 21
 3a2:	e3 ec       	ldi	r30, 0xC3	; 195
 3a4:	f9 e0       	ldi	r31, 0x09	; 9
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <ENVIA_CMD+0x1c>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <ENVIA_CMD+0x22>
 3ac:	00 00       	nop
	_delay_ms(10);
	
	cmd_enviar=	((dato<<4) & 0xF0);  // Se envia el nibble bajo
 3ae:	f0 e1       	ldi	r31, 0x10	; 16
 3b0:	8f 9f       	mul	r24, r31
 3b2:	c0 01       	movw	r24, r0
 3b4:	11 24       	eor	r1, r1
	LCD_PUERTO =  cmd_enviar;        // al puerto
 3b6:	85 bb       	out	0x15, r24	; 21
	LCD_PUERTO &=~(1<<LCD_RS);   //  RS = 0
 3b8:	aa 98       	cbi	0x15, 2	; 21
	LCD_PUERTO |= (1<<LCD_E);    //   E = 1
 3ba:	ab 9a       	sbi	0x15, 3	; 21
 3bc:	89 ef       	ldi	r24, 0xF9	; 249
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <ENVIA_CMD+0x36>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <ENVIA_CMD+0x3c>
 3c6:	00 00       	nop
	_delay_ms(1);
	LCD_PUERTO &=~(1<<LCD_E);    //    E = 0
 3c8:	ab 98       	cbi	0x15, 3	; 21
 3ca:	e3 ec       	ldi	r30, 0xC3	; 195
 3cc:	f9 e0       	ldi	r31, 0x09	; 9
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <ENVIA_CMD+0x44>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <ENVIA_CMD+0x4a>
 3d4:	00 00       	nop
 3d6:	08 95       	ret

000003d8 <LCD_INICIALIZA>:
	}
}

void LCD_INICIALIZA()
{
	ENVIA_CMD(0x02);
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
	ENVIA_CMD(0x28); // 0010 1000 DL = 0 comunicacion de 4 bits N = 1 Pantalla de 2 lineas F = 0 Caracteres de 5x7 puntos
 3de:	88 e2       	ldi	r24, 0x28	; 40
 3e0:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
	ENVIA_CMD(0x0E); // D=1 Display ON Cursor OFF
 3e4:	8e e0       	ldi	r24, 0x0E	; 14
 3e6:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
	ENVIA_CMD(0x06); // I/D = 1 Incremento Automatico S=0
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
	ENVIA_CMD(0x01);  // Limpia LCD
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
	ENVIA_CMD(0X80);
 3f6:	80 e8       	ldi	r24, 0x80	; 128
 3f8:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
 3fc:	08 95       	ret

000003fe <ENVIA_DATO>:

void ENVIA_DATO(char dato)
{
	char dto_enviar;
	
	dto_enviar=	(dato & 0xF0);      // se envia el nibble alto
 3fe:	98 2f       	mov	r25, r24
 400:	90 7f       	andi	r25, 0xF0	; 240
	LCD_PUERTO  =  dto_enviar;       // al puerto
 402:	95 bb       	out	0x15, r25	; 21
	LCD_PUERTO |= (1<<LCD_RS)|(1<<LCD_E);  //  RS = 1   E = 1
 404:	95 b3       	in	r25, 0x15	; 21
 406:	9c 60       	ori	r25, 0x0C	; 12
 408:	95 bb       	out	0x15, r25	; 21
 40a:	e9 ef       	ldi	r30, 0xF9	; 249
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <ENVIA_DATO+0x10>
 412:	00 c0       	rjmp	.+0      	; 0x414 <ENVIA_DATO+0x16>
 414:	00 00       	nop
	_delay_ms(1);
	LCD_PUERTO &=~(1<<LCD_E);	//E=0
 416:	ab 98       	cbi	0x15, 3	; 21
	LCD_PUERTO &=~(1<<LCD_RS);	//RS=0
 418:	aa 98       	cbi	0x15, 2	; 21
 41a:	e3 ec       	ldi	r30, 0xC3	; 195
 41c:	f9 e0       	ldi	r31, 0x09	; 9
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <ENVIA_DATO+0x20>
 422:	00 c0       	rjmp	.+0      	; 0x424 <ENVIA_DATO+0x26>
 424:	00 00       	nop
	_delay_ms(10);
	
	dto_enviar=	((dato<<4) & 0xF0);  // Se envia el nibble bajo
 426:	f0 e1       	ldi	r31, 0x10	; 16
 428:	8f 9f       	mul	r24, r31
 42a:	c0 01       	movw	r24, r0
 42c:	11 24       	eor	r1, r1
	LCD_PUERTO =  dto_enviar;        // al puerto
 42e:	85 bb       	out	0x15, r24	; 21
	LCD_PUERTO |= (1<<LCD_RS)|(1<<LCD_E);  //  RS = 1   E = 1
 430:	85 b3       	in	r24, 0x15	; 21
 432:	8c 60       	ori	r24, 0x0C	; 12
 434:	85 bb       	out	0x15, r24	; 21
 436:	89 ef       	ldi	r24, 0xF9	; 249
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <ENVIA_DATO+0x3c>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <ENVIA_DATO+0x42>
 440:	00 00       	nop
	_delay_ms(1);
	LCD_PUERTO &=~(1<<LCD_E);	//E=0
 442:	ab 98       	cbi	0x15, 3	; 21
	LCD_PUERTO &=~(1<<LCD_RS);	//RS=0
 444:	aa 98       	cbi	0x15, 2	; 21
 446:	e3 ec       	ldi	r30, 0xC3	; 195
 448:	f9 e0       	ldi	r31, 0x09	; 9
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <ENVIA_DATO+0x4c>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <ENVIA_DATO+0x52>
 450:	00 00       	nop
 452:	08 95       	ret

00000454 <ENVIA_CADENA>:
	_delay_ms(10);
	return;
}

void ENVIA_CADENA(char *dato)
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	ec 01       	movw	r28, r24
	int i;
	for(i=0;dato[i]!='\0';i++)
 45a:	88 81       	ld	r24, Y
 45c:	88 23       	and	r24, r24
 45e:	31 f0       	breq	.+12     	; 0x46c <__stack+0xd>
 460:	21 96       	adiw	r28, 0x01	; 1
	ENVIA_DATO(dato[i]);
 462:	0e 94 ff 01 	call	0x3fe	; 0x3fe <ENVIA_DATO>
}

void ENVIA_CADENA(char *dato)
{
	int i;
	for(i=0;dato[i]!='\0';i++)
 466:	89 91       	ld	r24, Y+
 468:	81 11       	cpse	r24, r1
 46a:	fb cf       	rjmp	.-10     	; 0x462 <__stack+0x3>
	ENVIA_DATO(dato[i]);
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <CURSOR_IZQ_CORRE>:
	ENVIA_CMD (0x18); // 0001 1000
}

void CURSOR_IZQ_CORRE() //sin desplazar pantalla
{
	ENVIA_CMD(0x10);
 472:	80 e1       	ldi	r24, 0x10	; 16
 474:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
 478:	08 95       	ret

0000047a <POS_LINEA1>:

void POS_LINEA1 (char posicion)
{
	char lineal = 0x80;
	posicion= posicion|lineal;
	ENVIA_CMD (posicion);
 47a:	80 68       	ori	r24, 0x80	; 128
 47c:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
 480:	08 95       	ret

00000482 <POS_LINEA2>:

void POS_LINEA2 (char posicion)
{
	char linea2 = 0xC0;
	posicion= posicion|linea2;
	ENVIA_CMD (posicion);
 482:	80 6c       	ori	r24, 0xC0	; 192
 484:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
 488:	08 95       	ret

0000048a <APAGAR_CURSOR>:
	_delay_ms (50);
}

void APAGAR_CURSOR()
{
	ENVIA_CMD(0X0C);
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	0e 94 c5 01 	call	0x38a	; 0x38a <ENVIA_CMD>
 490:	08 95       	ret

00000492 <LEE_TECLADO>:
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
	switch(PORTD)
 492:	82 b3       	in	r24, 0x12	; 18
 494:	8f 3b       	cpi	r24, 0xBF	; 191
 496:	99 f1       	breq	.+102    	; 0x4fe <LEE_TECLADO+0x6c>
 498:	20 f4       	brcc	.+8      	; 0x4a2 <LEE_TECLADO+0x10>
 49a:	8f 37       	cpi	r24, 0x7F	; 127
 49c:	09 f4       	brne	.+2      	; 0x4a0 <LEE_TECLADO+0xe>
 49e:	43 c0       	rjmp	.+134    	; 0x526 <LEE_TECLADO+0x94>
 4a0:	56 c0       	rjmp	.+172    	; 0x54e <LEE_TECLADO+0xbc>
 4a2:	8f 3d       	cpi	r24, 0xDF	; 223
 4a4:	c1 f0       	breq	.+48     	; 0x4d6 <LEE_TECLADO+0x44>
 4a6:	8f 3e       	cpi	r24, 0xEF	; 239
 4a8:	09 f0       	breq	.+2      	; 0x4ac <LEE_TECLADO+0x1a>
 4aa:	51 c0       	rjmp	.+162    	; 0x54e <LEE_TECLADO+0xbc>
	{
		case COL1:
		switch(PIND&0X0F)
 4ac:	80 b3       	in	r24, 0x10	; 16
 4ae:	8f 70       	andi	r24, 0x0F	; 15
 4b0:	8b 30       	cpi	r24, 0x0B	; 11
 4b2:	69 f0       	breq	.+26     	; 0x4ce <LEE_TECLADO+0x3c>
 4b4:	18 f4       	brcc	.+6      	; 0x4bc <LEE_TECLADO+0x2a>
 4b6:	87 30       	cpi	r24, 0x07	; 7
 4b8:	61 f0       	breq	.+24     	; 0x4d2 <LEE_TECLADO+0x40>
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <LEE_TECLADO+0x34>
 4bc:	8d 30       	cpi	r24, 0x0D	; 13
 4be:	29 f0       	breq	.+10     	; 0x4ca <LEE_TECLADO+0x38>
 4c0:	8e 30       	cpi	r24, 0x0E	; 14
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <LEE_TECLADO+0x34>
 4c4:	46 c0       	rjmp	.+140    	; 0x552 <LEE_TECLADO+0xc0>
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	08 95       	ret
	{
		case COL1:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='1'; break;//0X0E
			case FIL2: VALOR_TECLADO='2'; break;//0X0D:
 4ca:	82 e3       	ldi	r24, 0x32	; 50
 4cc:	08 95       	ret
			case FIL3: VALOR_TECLADO='3'; break;//0X0B
 4ce:	83 e3       	ldi	r24, 0x33	; 51
 4d0:	08 95       	ret
			case FIL4: VALOR_TECLADO='A'; break;//0X07
 4d2:	81 e4       	ldi	r24, 0x41	; 65
 4d4:	08 95       	ret
		}
		break;
		
		case COL2:
		switch(PIND&0X0F)
 4d6:	80 b3       	in	r24, 0x10	; 16
 4d8:	8f 70       	andi	r24, 0x0F	; 15
 4da:	8b 30       	cpi	r24, 0x0B	; 11
 4dc:	61 f0       	breq	.+24     	; 0x4f6 <LEE_TECLADO+0x64>
 4de:	18 f4       	brcc	.+6      	; 0x4e6 <LEE_TECLADO+0x54>
 4e0:	87 30       	cpi	r24, 0x07	; 7
 4e2:	59 f0       	breq	.+22     	; 0x4fa <LEE_TECLADO+0x68>
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <LEE_TECLADO+0x5c>
 4e6:	8d 30       	cpi	r24, 0x0D	; 13
 4e8:	21 f0       	breq	.+8      	; 0x4f2 <LEE_TECLADO+0x60>
 4ea:	8e 30       	cpi	r24, 0x0E	; 14
 4ec:	a1 f1       	breq	.+104    	; 0x556 <LEE_TECLADO+0xc4>
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 4ee:	80 e2       	ldi	r24, 0x20	; 32
 4f0:	08 95       	ret
		
		case COL2:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='4'; break;
			case FIL2: VALOR_TECLADO='5'; break;
 4f2:	85 e3       	ldi	r24, 0x35	; 53
 4f4:	08 95       	ret
			case FIL3: VALOR_TECLADO='6'; break;
 4f6:	86 e3       	ldi	r24, 0x36	; 54
 4f8:	08 95       	ret
			case FIL4: VALOR_TECLADO='B'; break;
 4fa:	82 e4       	ldi	r24, 0x42	; 66
 4fc:	08 95       	ret
		}
		break;
		
		case COL3:
		switch(PIND&0X0F)
 4fe:	80 b3       	in	r24, 0x10	; 16
 500:	8f 70       	andi	r24, 0x0F	; 15
 502:	8b 30       	cpi	r24, 0x0B	; 11
 504:	61 f0       	breq	.+24     	; 0x51e <LEE_TECLADO+0x8c>
 506:	18 f4       	brcc	.+6      	; 0x50e <LEE_TECLADO+0x7c>
 508:	87 30       	cpi	r24, 0x07	; 7
 50a:	59 f0       	breq	.+22     	; 0x522 <LEE_TECLADO+0x90>
 50c:	04 c0       	rjmp	.+8      	; 0x516 <LEE_TECLADO+0x84>
 50e:	8d 30       	cpi	r24, 0x0D	; 13
 510:	21 f0       	breq	.+8      	; 0x51a <LEE_TECLADO+0x88>
 512:	8e 30       	cpi	r24, 0x0E	; 14
 514:	11 f1       	breq	.+68     	; 0x55a <LEE_TECLADO+0xc8>
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	08 95       	ret
		
		case COL3:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='7'; break;
			case FIL2: VALOR_TECLADO='8'; break;
 51a:	88 e3       	ldi	r24, 0x38	; 56
 51c:	08 95       	ret
			case FIL3: VALOR_TECLADO='9'; break;
 51e:	89 e3       	ldi	r24, 0x39	; 57
 520:	08 95       	ret
			case FIL4: VALOR_TECLADO='C'; break;
 522:	83 e4       	ldi	r24, 0x43	; 67
 524:	08 95       	ret
		}
		break;
		
		case COL4:
		switch(PIND&0X0F)
 526:	80 b3       	in	r24, 0x10	; 16
 528:	8f 70       	andi	r24, 0x0F	; 15
 52a:	8b 30       	cpi	r24, 0x0B	; 11
 52c:	61 f0       	breq	.+24     	; 0x546 <LEE_TECLADO+0xb4>
 52e:	18 f4       	brcc	.+6      	; 0x536 <LEE_TECLADO+0xa4>
 530:	87 30       	cpi	r24, 0x07	; 7
 532:	59 f0       	breq	.+22     	; 0x54a <LEE_TECLADO+0xb8>
 534:	04 c0       	rjmp	.+8      	; 0x53e <LEE_TECLADO+0xac>
 536:	8d 30       	cpi	r24, 0x0D	; 13
 538:	21 f0       	breq	.+8      	; 0x542 <LEE_TECLADO+0xb0>
 53a:	8e 30       	cpi	r24, 0x0E	; 14
 53c:	81 f0       	breq	.+32     	; 0x55e <LEE_TECLADO+0xcc>
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 53e:	80 e2       	ldi	r24, 0x20	; 32
 540:	08 95       	ret
		
		case COL4:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='*'; break;
			case FIL2: VALOR_TECLADO='0'; break;
 542:	80 e3       	ldi	r24, 0x30	; 48
 544:	08 95       	ret
			case FIL3: VALOR_TECLADO='#'; break;
 546:	83 e2       	ldi	r24, 0x23	; 35
 548:	08 95       	ret
			case FIL4: VALOR_TECLADO='D'; break;
 54a:	84 e4       	ldi	r24, 0x44	; 68
 54c:	08 95       	ret
 */ 
#include "UPIITA_TECLADO_BARRIDO.h"

char LEE_TECLADO()
{
	char VALOR_TECLADO=' ';
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	08 95       	ret
	switch(PORTD)
	{
		case COL1:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='1'; break;//0X0E
 552:	81 e3       	ldi	r24, 0x31	; 49
 554:	08 95       	ret
		break;
		
		case COL2:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='4'; break;
 556:	84 e3       	ldi	r24, 0x34	; 52
 558:	08 95       	ret
		break;
		
		case COL3:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='7'; break;
 55a:	87 e3       	ldi	r24, 0x37	; 55
 55c:	08 95       	ret
		break;
		
		case COL4:
		switch(PIND&0X0F)
		{
			case FIL1: VALOR_TECLADO='*'; break;
 55e:	8a e2       	ldi	r24, 0x2A	; 42
		}
	break;
	}
	
	return VALOR_TECLADO;
}
 560:	08 95       	ret

00000562 <BARRE_TECLADO>:

void BARRE_TECLADO()
{
	switch(PORTD)
 562:	82 b3       	in	r24, 0x12	; 18
 564:	8f 3d       	cpi	r24, 0xDF	; 223
 566:	41 f0       	breq	.+16     	; 0x578 <BARRE_TECLADO+0x16>
 568:	8f 3e       	cpi	r24, 0xEF	; 239
 56a:	19 f0       	breq	.+6      	; 0x572 <BARRE_TECLADO+0x10>
 56c:	8f 3b       	cpi	r24, 0xBF	; 191
 56e:	51 f4       	brne	.+20     	; 0x584 <BARRE_TECLADO+0x22>
 570:	06 c0       	rjmp	.+12     	; 0x57e <BARRE_TECLADO+0x1c>
	{
		case COL1: PORTD=COL2; break;
 572:	8f ed       	ldi	r24, 0xDF	; 223
 574:	82 bb       	out	0x12, r24	; 18
 576:	08 95       	ret
		case COL2: PORTD=COL3; break;
 578:	8f eb       	ldi	r24, 0xBF	; 191
 57a:	82 bb       	out	0x12, r24	; 18
 57c:	08 95       	ret
		case COL3: PORTD=COL4; break;
 57e:	8f e7       	ldi	r24, 0x7F	; 127
 580:	82 bb       	out	0x12, r24	; 18
 582:	08 95       	ret
		//case COL4: PORTD=COL1; break;
		default: PORTD=COL1;
 584:	8f ee       	ldi	r24, 0xEF	; 239
 586:	82 bb       	out	0x12, r24	; 18
 588:	08 95       	ret

0000058a <sprintf>:
 58a:	ae e0       	ldi	r26, 0x0E	; 14
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	eb ec       	ldi	r30, 0xCB	; 203
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	0c 94 6d 05 	jmp	0xada	; 0xada <__prologue_saves__+0x1c>
 596:	0d 89       	ldd	r16, Y+21	; 0x15
 598:	1e 89       	ldd	r17, Y+22	; 0x16
 59a:	86 e0       	ldi	r24, 0x06	; 6
 59c:	8c 83       	std	Y+4, r24	; 0x04
 59e:	1a 83       	std	Y+2, r17	; 0x02
 5a0:	09 83       	std	Y+1, r16	; 0x01
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	9f e7       	ldi	r25, 0x7F	; 127
 5a6:	9e 83       	std	Y+6, r25	; 0x06
 5a8:	8d 83       	std	Y+5, r24	; 0x05
 5aa:	ae 01       	movw	r20, r28
 5ac:	47 5e       	subi	r20, 0xE7	; 231
 5ae:	5f 4f       	sbci	r21, 0xFF	; 255
 5b0:	6f 89       	ldd	r22, Y+23	; 0x17
 5b2:	78 8d       	ldd	r23, Y+24	; 0x18
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vfprintf>
 5bc:	ef 81       	ldd	r30, Y+7	; 0x07
 5be:	f8 85       	ldd	r31, Y+8	; 0x08
 5c0:	e0 0f       	add	r30, r16
 5c2:	f1 1f       	adc	r31, r17
 5c4:	10 82       	st	Z, r1
 5c6:	2e 96       	adiw	r28, 0x0e	; 14
 5c8:	e4 e0       	ldi	r30, 0x04	; 4
 5ca:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__epilogue_restores__+0x1c>

000005ce <vfprintf>:
 5ce:	ac e0       	ldi	r26, 0x0C	; 12
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	ed ee       	ldi	r30, 0xED	; 237
 5d4:	f2 e0       	ldi	r31, 0x02	; 2
 5d6:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__prologue_saves__>
 5da:	7c 01       	movw	r14, r24
 5dc:	6b 01       	movw	r12, r22
 5de:	8a 01       	movw	r16, r20
 5e0:	fc 01       	movw	r30, r24
 5e2:	17 82       	std	Z+7, r1	; 0x07
 5e4:	16 82       	std	Z+6, r1	; 0x06
 5e6:	83 81       	ldd	r24, Z+3	; 0x03
 5e8:	81 ff       	sbrs	r24, 1
 5ea:	bd c1       	rjmp	.+890    	; 0x966 <vfprintf+0x398>
 5ec:	ce 01       	movw	r24, r28
 5ee:	01 96       	adiw	r24, 0x01	; 1
 5f0:	4c 01       	movw	r8, r24
 5f2:	f7 01       	movw	r30, r14
 5f4:	93 81       	ldd	r25, Z+3	; 0x03
 5f6:	f6 01       	movw	r30, r12
 5f8:	93 fd       	sbrc	r25, 3
 5fa:	85 91       	lpm	r24, Z+
 5fc:	93 ff       	sbrs	r25, 3
 5fe:	81 91       	ld	r24, Z+
 600:	6f 01       	movw	r12, r30
 602:	88 23       	and	r24, r24
 604:	09 f4       	brne	.+2      	; 0x608 <vfprintf+0x3a>
 606:	ab c1       	rjmp	.+854    	; 0x95e <vfprintf+0x390>
 608:	85 32       	cpi	r24, 0x25	; 37
 60a:	39 f4       	brne	.+14     	; 0x61a <vfprintf+0x4c>
 60c:	93 fd       	sbrc	r25, 3
 60e:	85 91       	lpm	r24, Z+
 610:	93 ff       	sbrs	r25, 3
 612:	81 91       	ld	r24, Z+
 614:	6f 01       	movw	r12, r30
 616:	85 32       	cpi	r24, 0x25	; 37
 618:	29 f4       	brne	.+10     	; 0x624 <vfprintf+0x56>
 61a:	b7 01       	movw	r22, r14
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 622:	e7 cf       	rjmp	.-50     	; 0x5f2 <vfprintf+0x24>
 624:	51 2c       	mov	r5, r1
 626:	31 2c       	mov	r3, r1
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	20 32       	cpi	r18, 0x20	; 32
 62c:	a0 f4       	brcc	.+40     	; 0x656 <vfprintf+0x88>
 62e:	8b 32       	cpi	r24, 0x2B	; 43
 630:	69 f0       	breq	.+26     	; 0x64c <vfprintf+0x7e>
 632:	30 f4       	brcc	.+12     	; 0x640 <vfprintf+0x72>
 634:	80 32       	cpi	r24, 0x20	; 32
 636:	59 f0       	breq	.+22     	; 0x64e <vfprintf+0x80>
 638:	83 32       	cpi	r24, 0x23	; 35
 63a:	69 f4       	brne	.+26     	; 0x656 <vfprintf+0x88>
 63c:	20 61       	ori	r18, 0x10	; 16
 63e:	2c c0       	rjmp	.+88     	; 0x698 <vfprintf+0xca>
 640:	8d 32       	cpi	r24, 0x2D	; 45
 642:	39 f0       	breq	.+14     	; 0x652 <vfprintf+0x84>
 644:	80 33       	cpi	r24, 0x30	; 48
 646:	39 f4       	brne	.+14     	; 0x656 <vfprintf+0x88>
 648:	21 60       	ori	r18, 0x01	; 1
 64a:	26 c0       	rjmp	.+76     	; 0x698 <vfprintf+0xca>
 64c:	22 60       	ori	r18, 0x02	; 2
 64e:	24 60       	ori	r18, 0x04	; 4
 650:	23 c0       	rjmp	.+70     	; 0x698 <vfprintf+0xca>
 652:	28 60       	ori	r18, 0x08	; 8
 654:	21 c0       	rjmp	.+66     	; 0x698 <vfprintf+0xca>
 656:	27 fd       	sbrc	r18, 7
 658:	27 c0       	rjmp	.+78     	; 0x6a8 <vfprintf+0xda>
 65a:	30 ed       	ldi	r19, 0xD0	; 208
 65c:	38 0f       	add	r19, r24
 65e:	3a 30       	cpi	r19, 0x0A	; 10
 660:	78 f4       	brcc	.+30     	; 0x680 <vfprintf+0xb2>
 662:	26 ff       	sbrs	r18, 6
 664:	06 c0       	rjmp	.+12     	; 0x672 <vfprintf+0xa4>
 666:	fa e0       	ldi	r31, 0x0A	; 10
 668:	5f 9e       	mul	r5, r31
 66a:	30 0d       	add	r19, r0
 66c:	11 24       	eor	r1, r1
 66e:	53 2e       	mov	r5, r19
 670:	13 c0       	rjmp	.+38     	; 0x698 <vfprintf+0xca>
 672:	8a e0       	ldi	r24, 0x0A	; 10
 674:	38 9e       	mul	r3, r24
 676:	30 0d       	add	r19, r0
 678:	11 24       	eor	r1, r1
 67a:	33 2e       	mov	r3, r19
 67c:	20 62       	ori	r18, 0x20	; 32
 67e:	0c c0       	rjmp	.+24     	; 0x698 <vfprintf+0xca>
 680:	8e 32       	cpi	r24, 0x2E	; 46
 682:	21 f4       	brne	.+8      	; 0x68c <vfprintf+0xbe>
 684:	26 fd       	sbrc	r18, 6
 686:	6b c1       	rjmp	.+726    	; 0x95e <vfprintf+0x390>
 688:	20 64       	ori	r18, 0x40	; 64
 68a:	06 c0       	rjmp	.+12     	; 0x698 <vfprintf+0xca>
 68c:	8c 36       	cpi	r24, 0x6C	; 108
 68e:	11 f4       	brne	.+4      	; 0x694 <vfprintf+0xc6>
 690:	20 68       	ori	r18, 0x80	; 128
 692:	02 c0       	rjmp	.+4      	; 0x698 <vfprintf+0xca>
 694:	88 36       	cpi	r24, 0x68	; 104
 696:	41 f4       	brne	.+16     	; 0x6a8 <vfprintf+0xda>
 698:	f6 01       	movw	r30, r12
 69a:	93 fd       	sbrc	r25, 3
 69c:	85 91       	lpm	r24, Z+
 69e:	93 ff       	sbrs	r25, 3
 6a0:	81 91       	ld	r24, Z+
 6a2:	6f 01       	movw	r12, r30
 6a4:	81 11       	cpse	r24, r1
 6a6:	c1 cf       	rjmp	.-126    	; 0x62a <vfprintf+0x5c>
 6a8:	98 2f       	mov	r25, r24
 6aa:	9f 7d       	andi	r25, 0xDF	; 223
 6ac:	95 54       	subi	r25, 0x45	; 69
 6ae:	93 30       	cpi	r25, 0x03	; 3
 6b0:	28 f4       	brcc	.+10     	; 0x6bc <vfprintf+0xee>
 6b2:	0c 5f       	subi	r16, 0xFC	; 252
 6b4:	1f 4f       	sbci	r17, 0xFF	; 255
 6b6:	ff e3       	ldi	r31, 0x3F	; 63
 6b8:	f9 83       	std	Y+1, r31	; 0x01
 6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <vfprintf+0x108>
 6bc:	83 36       	cpi	r24, 0x63	; 99
 6be:	31 f0       	breq	.+12     	; 0x6cc <vfprintf+0xfe>
 6c0:	83 37       	cpi	r24, 0x73	; 115
 6c2:	71 f0       	breq	.+28     	; 0x6e0 <vfprintf+0x112>
 6c4:	83 35       	cpi	r24, 0x53	; 83
 6c6:	09 f0       	breq	.+2      	; 0x6ca <vfprintf+0xfc>
 6c8:	5b c0       	rjmp	.+182    	; 0x780 <vfprintf+0x1b2>
 6ca:	22 c0       	rjmp	.+68     	; 0x710 <vfprintf+0x142>
 6cc:	f8 01       	movw	r30, r16
 6ce:	80 81       	ld	r24, Z
 6d0:	89 83       	std	Y+1, r24	; 0x01
 6d2:	0e 5f       	subi	r16, 0xFE	; 254
 6d4:	1f 4f       	sbci	r17, 0xFF	; 255
 6d6:	44 24       	eor	r4, r4
 6d8:	43 94       	inc	r4
 6da:	51 2c       	mov	r5, r1
 6dc:	54 01       	movw	r10, r8
 6de:	15 c0       	rjmp	.+42     	; 0x70a <vfprintf+0x13c>
 6e0:	38 01       	movw	r6, r16
 6e2:	f2 e0       	ldi	r31, 0x02	; 2
 6e4:	6f 0e       	add	r6, r31
 6e6:	71 1c       	adc	r7, r1
 6e8:	f8 01       	movw	r30, r16
 6ea:	a0 80       	ld	r10, Z
 6ec:	b1 80       	ldd	r11, Z+1	; 0x01
 6ee:	26 ff       	sbrs	r18, 6
 6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <vfprintf+0x12a>
 6f2:	65 2d       	mov	r22, r5
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <vfprintf+0x12e>
 6f8:	6f ef       	ldi	r22, 0xFF	; 255
 6fa:	7f ef       	ldi	r23, 0xFF	; 255
 6fc:	c5 01       	movw	r24, r10
 6fe:	2c 87       	std	Y+12, r18	; 0x0c
 700:	0e 94 c4 04 	call	0x988	; 0x988 <strnlen>
 704:	2c 01       	movw	r4, r24
 706:	83 01       	movw	r16, r6
 708:	2c 85       	ldd	r18, Y+12	; 0x0c
 70a:	2f 77       	andi	r18, 0x7F	; 127
 70c:	22 2e       	mov	r2, r18
 70e:	17 c0       	rjmp	.+46     	; 0x73e <vfprintf+0x170>
 710:	38 01       	movw	r6, r16
 712:	f2 e0       	ldi	r31, 0x02	; 2
 714:	6f 0e       	add	r6, r31
 716:	71 1c       	adc	r7, r1
 718:	f8 01       	movw	r30, r16
 71a:	a0 80       	ld	r10, Z
 71c:	b1 80       	ldd	r11, Z+1	; 0x01
 71e:	26 ff       	sbrs	r18, 6
 720:	03 c0       	rjmp	.+6      	; 0x728 <vfprintf+0x15a>
 722:	65 2d       	mov	r22, r5
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <vfprintf+0x15e>
 728:	6f ef       	ldi	r22, 0xFF	; 255
 72a:	7f ef       	ldi	r23, 0xFF	; 255
 72c:	c5 01       	movw	r24, r10
 72e:	2c 87       	std	Y+12, r18	; 0x0c
 730:	0e 94 b9 04 	call	0x972	; 0x972 <strnlen_P>
 734:	2c 01       	movw	r4, r24
 736:	2c 85       	ldd	r18, Y+12	; 0x0c
 738:	20 68       	ori	r18, 0x80	; 128
 73a:	22 2e       	mov	r2, r18
 73c:	83 01       	movw	r16, r6
 73e:	23 fc       	sbrc	r2, 3
 740:	1b c0       	rjmp	.+54     	; 0x778 <vfprintf+0x1aa>
 742:	83 2d       	mov	r24, r3
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	48 16       	cp	r4, r24
 748:	59 06       	cpc	r5, r25
 74a:	b0 f4       	brcc	.+44     	; 0x778 <vfprintf+0x1aa>
 74c:	b7 01       	movw	r22, r14
 74e:	80 e2       	ldi	r24, 0x20	; 32
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 756:	3a 94       	dec	r3
 758:	f4 cf       	rjmp	.-24     	; 0x742 <vfprintf+0x174>
 75a:	f5 01       	movw	r30, r10
 75c:	27 fc       	sbrc	r2, 7
 75e:	85 91       	lpm	r24, Z+
 760:	27 fe       	sbrs	r2, 7
 762:	81 91       	ld	r24, Z+
 764:	5f 01       	movw	r10, r30
 766:	b7 01       	movw	r22, r14
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 76e:	31 10       	cpse	r3, r1
 770:	3a 94       	dec	r3
 772:	f1 e0       	ldi	r31, 0x01	; 1
 774:	4f 1a       	sub	r4, r31
 776:	51 08       	sbc	r5, r1
 778:	41 14       	cp	r4, r1
 77a:	51 04       	cpc	r5, r1
 77c:	71 f7       	brne	.-36     	; 0x75a <vfprintf+0x18c>
 77e:	e5 c0       	rjmp	.+458    	; 0x94a <vfprintf+0x37c>
 780:	84 36       	cpi	r24, 0x64	; 100
 782:	11 f0       	breq	.+4      	; 0x788 <vfprintf+0x1ba>
 784:	89 36       	cpi	r24, 0x69	; 105
 786:	39 f5       	brne	.+78     	; 0x7d6 <vfprintf+0x208>
 788:	f8 01       	movw	r30, r16
 78a:	27 ff       	sbrs	r18, 7
 78c:	07 c0       	rjmp	.+14     	; 0x79c <vfprintf+0x1ce>
 78e:	60 81       	ld	r22, Z
 790:	71 81       	ldd	r23, Z+1	; 0x01
 792:	82 81       	ldd	r24, Z+2	; 0x02
 794:	93 81       	ldd	r25, Z+3	; 0x03
 796:	0c 5f       	subi	r16, 0xFC	; 252
 798:	1f 4f       	sbci	r17, 0xFF	; 255
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <vfprintf+0x1de>
 79c:	60 81       	ld	r22, Z
 79e:	71 81       	ldd	r23, Z+1	; 0x01
 7a0:	88 27       	eor	r24, r24
 7a2:	77 fd       	sbrc	r23, 7
 7a4:	80 95       	com	r24
 7a6:	98 2f       	mov	r25, r24
 7a8:	0e 5f       	subi	r16, 0xFE	; 254
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	2f 76       	andi	r18, 0x6F	; 111
 7ae:	b2 2e       	mov	r11, r18
 7b0:	97 ff       	sbrs	r25, 7
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <vfprintf+0x1f8>
 7b4:	90 95       	com	r25
 7b6:	80 95       	com	r24
 7b8:	70 95       	com	r23
 7ba:	61 95       	neg	r22
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	20 68       	ori	r18, 0x80	; 128
 7c4:	b2 2e       	mov	r11, r18
 7c6:	2a e0       	ldi	r18, 0x0A	; 10
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	a4 01       	movw	r20, r8
 7cc:	0e 94 01 05 	call	0xa02	; 0xa02 <__ultoa_invert>
 7d0:	a8 2e       	mov	r10, r24
 7d2:	a8 18       	sub	r10, r8
 7d4:	44 c0       	rjmp	.+136    	; 0x85e <vfprintf+0x290>
 7d6:	85 37       	cpi	r24, 0x75	; 117
 7d8:	29 f4       	brne	.+10     	; 0x7e4 <vfprintf+0x216>
 7da:	2f 7e       	andi	r18, 0xEF	; 239
 7dc:	b2 2e       	mov	r11, r18
 7de:	2a e0       	ldi	r18, 0x0A	; 10
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	25 c0       	rjmp	.+74     	; 0x82e <vfprintf+0x260>
 7e4:	f2 2f       	mov	r31, r18
 7e6:	f9 7f       	andi	r31, 0xF9	; 249
 7e8:	bf 2e       	mov	r11, r31
 7ea:	8f 36       	cpi	r24, 0x6F	; 111
 7ec:	c1 f0       	breq	.+48     	; 0x81e <vfprintf+0x250>
 7ee:	18 f4       	brcc	.+6      	; 0x7f6 <vfprintf+0x228>
 7f0:	88 35       	cpi	r24, 0x58	; 88
 7f2:	79 f0       	breq	.+30     	; 0x812 <vfprintf+0x244>
 7f4:	b4 c0       	rjmp	.+360    	; 0x95e <vfprintf+0x390>
 7f6:	80 37       	cpi	r24, 0x70	; 112
 7f8:	19 f0       	breq	.+6      	; 0x800 <vfprintf+0x232>
 7fa:	88 37       	cpi	r24, 0x78	; 120
 7fc:	21 f0       	breq	.+8      	; 0x806 <vfprintf+0x238>
 7fe:	af c0       	rjmp	.+350    	; 0x95e <vfprintf+0x390>
 800:	2f 2f       	mov	r18, r31
 802:	20 61       	ori	r18, 0x10	; 16
 804:	b2 2e       	mov	r11, r18
 806:	b4 fe       	sbrs	r11, 4
 808:	0d c0       	rjmp	.+26     	; 0x824 <vfprintf+0x256>
 80a:	8b 2d       	mov	r24, r11
 80c:	84 60       	ori	r24, 0x04	; 4
 80e:	b8 2e       	mov	r11, r24
 810:	09 c0       	rjmp	.+18     	; 0x824 <vfprintf+0x256>
 812:	24 ff       	sbrs	r18, 4
 814:	0a c0       	rjmp	.+20     	; 0x82a <vfprintf+0x25c>
 816:	9f 2f       	mov	r25, r31
 818:	96 60       	ori	r25, 0x06	; 6
 81a:	b9 2e       	mov	r11, r25
 81c:	06 c0       	rjmp	.+12     	; 0x82a <vfprintf+0x25c>
 81e:	28 e0       	ldi	r18, 0x08	; 8
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	05 c0       	rjmp	.+10     	; 0x82e <vfprintf+0x260>
 824:	20 e1       	ldi	r18, 0x10	; 16
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	02 c0       	rjmp	.+4      	; 0x82e <vfprintf+0x260>
 82a:	20 e1       	ldi	r18, 0x10	; 16
 82c:	32 e0       	ldi	r19, 0x02	; 2
 82e:	f8 01       	movw	r30, r16
 830:	b7 fe       	sbrs	r11, 7
 832:	07 c0       	rjmp	.+14     	; 0x842 <vfprintf+0x274>
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	82 81       	ldd	r24, Z+2	; 0x02
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	0c 5f       	subi	r16, 0xFC	; 252
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	06 c0       	rjmp	.+12     	; 0x84e <vfprintf+0x280>
 842:	60 81       	ld	r22, Z
 844:	71 81       	ldd	r23, Z+1	; 0x01
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 5f       	subi	r16, 0xFE	; 254
 84c:	1f 4f       	sbci	r17, 0xFF	; 255
 84e:	a4 01       	movw	r20, r8
 850:	0e 94 01 05 	call	0xa02	; 0xa02 <__ultoa_invert>
 854:	a8 2e       	mov	r10, r24
 856:	a8 18       	sub	r10, r8
 858:	fb 2d       	mov	r31, r11
 85a:	ff 77       	andi	r31, 0x7F	; 127
 85c:	bf 2e       	mov	r11, r31
 85e:	b6 fe       	sbrs	r11, 6
 860:	0b c0       	rjmp	.+22     	; 0x878 <vfprintf+0x2aa>
 862:	2b 2d       	mov	r18, r11
 864:	2e 7f       	andi	r18, 0xFE	; 254
 866:	a5 14       	cp	r10, r5
 868:	50 f4       	brcc	.+20     	; 0x87e <vfprintf+0x2b0>
 86a:	b4 fe       	sbrs	r11, 4
 86c:	0a c0       	rjmp	.+20     	; 0x882 <vfprintf+0x2b4>
 86e:	b2 fc       	sbrc	r11, 2
 870:	08 c0       	rjmp	.+16     	; 0x882 <vfprintf+0x2b4>
 872:	2b 2d       	mov	r18, r11
 874:	2e 7e       	andi	r18, 0xEE	; 238
 876:	05 c0       	rjmp	.+10     	; 0x882 <vfprintf+0x2b4>
 878:	7a 2c       	mov	r7, r10
 87a:	2b 2d       	mov	r18, r11
 87c:	03 c0       	rjmp	.+6      	; 0x884 <vfprintf+0x2b6>
 87e:	7a 2c       	mov	r7, r10
 880:	01 c0       	rjmp	.+2      	; 0x884 <vfprintf+0x2b6>
 882:	75 2c       	mov	r7, r5
 884:	24 ff       	sbrs	r18, 4
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <vfprintf+0x2d4>
 888:	fe 01       	movw	r30, r28
 88a:	ea 0d       	add	r30, r10
 88c:	f1 1d       	adc	r31, r1
 88e:	80 81       	ld	r24, Z
 890:	80 33       	cpi	r24, 0x30	; 48
 892:	11 f4       	brne	.+4      	; 0x898 <vfprintf+0x2ca>
 894:	29 7e       	andi	r18, 0xE9	; 233
 896:	09 c0       	rjmp	.+18     	; 0x8aa <vfprintf+0x2dc>
 898:	22 ff       	sbrs	r18, 2
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <vfprintf+0x2da>
 89c:	73 94       	inc	r7
 89e:	73 94       	inc	r7
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <vfprintf+0x2dc>
 8a2:	82 2f       	mov	r24, r18
 8a4:	86 78       	andi	r24, 0x86	; 134
 8a6:	09 f0       	breq	.+2      	; 0x8aa <vfprintf+0x2dc>
 8a8:	73 94       	inc	r7
 8aa:	23 fd       	sbrc	r18, 3
 8ac:	13 c0       	rjmp	.+38     	; 0x8d4 <vfprintf+0x306>
 8ae:	20 ff       	sbrs	r18, 0
 8b0:	06 c0       	rjmp	.+12     	; 0x8be <vfprintf+0x2f0>
 8b2:	5a 2c       	mov	r5, r10
 8b4:	73 14       	cp	r7, r3
 8b6:	18 f4       	brcc	.+6      	; 0x8be <vfprintf+0x2f0>
 8b8:	53 0c       	add	r5, r3
 8ba:	57 18       	sub	r5, r7
 8bc:	73 2c       	mov	r7, r3
 8be:	73 14       	cp	r7, r3
 8c0:	68 f4       	brcc	.+26     	; 0x8dc <vfprintf+0x30e>
 8c2:	b7 01       	movw	r22, r14
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	2c 87       	std	Y+12, r18	; 0x0c
 8ca:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 8ce:	73 94       	inc	r7
 8d0:	2c 85       	ldd	r18, Y+12	; 0x0c
 8d2:	f5 cf       	rjmp	.-22     	; 0x8be <vfprintf+0x2f0>
 8d4:	73 14       	cp	r7, r3
 8d6:	10 f4       	brcc	.+4      	; 0x8dc <vfprintf+0x30e>
 8d8:	37 18       	sub	r3, r7
 8da:	01 c0       	rjmp	.+2      	; 0x8de <vfprintf+0x310>
 8dc:	31 2c       	mov	r3, r1
 8de:	24 ff       	sbrs	r18, 4
 8e0:	12 c0       	rjmp	.+36     	; 0x906 <vfprintf+0x338>
 8e2:	b7 01       	movw	r22, r14
 8e4:	80 e3       	ldi	r24, 0x30	; 48
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	2c 87       	std	Y+12, r18	; 0x0c
 8ea:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 8ee:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f0:	22 ff       	sbrs	r18, 2
 8f2:	17 c0       	rjmp	.+46     	; 0x922 <vfprintf+0x354>
 8f4:	21 ff       	sbrs	r18, 1
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x330>
 8f8:	88 e5       	ldi	r24, 0x58	; 88
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <vfprintf+0x334>
 8fe:	88 e7       	ldi	r24, 0x78	; 120
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	b7 01       	movw	r22, r14
 904:	0c c0       	rjmp	.+24     	; 0x91e <vfprintf+0x350>
 906:	82 2f       	mov	r24, r18
 908:	86 78       	andi	r24, 0x86	; 134
 90a:	59 f0       	breq	.+22     	; 0x922 <vfprintf+0x354>
 90c:	21 fd       	sbrc	r18, 1
 90e:	02 c0       	rjmp	.+4      	; 0x914 <vfprintf+0x346>
 910:	80 e2       	ldi	r24, 0x20	; 32
 912:	01 c0       	rjmp	.+2      	; 0x916 <vfprintf+0x348>
 914:	8b e2       	ldi	r24, 0x2B	; 43
 916:	27 fd       	sbrc	r18, 7
 918:	8d e2       	ldi	r24, 0x2D	; 45
 91a:	b7 01       	movw	r22, r14
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 922:	a5 14       	cp	r10, r5
 924:	38 f4       	brcc	.+14     	; 0x934 <vfprintf+0x366>
 926:	b7 01       	movw	r22, r14
 928:	80 e3       	ldi	r24, 0x30	; 48
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 930:	5a 94       	dec	r5
 932:	f7 cf       	rjmp	.-18     	; 0x922 <vfprintf+0x354>
 934:	aa 94       	dec	r10
 936:	f4 01       	movw	r30, r8
 938:	ea 0d       	add	r30, r10
 93a:	f1 1d       	adc	r31, r1
 93c:	80 81       	ld	r24, Z
 93e:	b7 01       	movw	r22, r14
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 946:	a1 10       	cpse	r10, r1
 948:	f5 cf       	rjmp	.-22     	; 0x934 <vfprintf+0x366>
 94a:	33 20       	and	r3, r3
 94c:	09 f4       	brne	.+2      	; 0x950 <vfprintf+0x382>
 94e:	51 ce       	rjmp	.-862    	; 0x5f2 <vfprintf+0x24>
 950:	b7 01       	movw	r22, r14
 952:	80 e2       	ldi	r24, 0x20	; 32
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 cf 04 	call	0x99e	; 0x99e <fputc>
 95a:	3a 94       	dec	r3
 95c:	f6 cf       	rjmp	.-20     	; 0x94a <vfprintf+0x37c>
 95e:	f7 01       	movw	r30, r14
 960:	86 81       	ldd	r24, Z+6	; 0x06
 962:	97 81       	ldd	r25, Z+7	; 0x07
 964:	02 c0       	rjmp	.+4      	; 0x96a <vfprintf+0x39c>
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	9f ef       	ldi	r25, 0xFF	; 255
 96a:	2c 96       	adiw	r28, 0x0c	; 12
 96c:	e2 e1       	ldi	r30, 0x12	; 18
 96e:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__epilogue_restores__>

00000972 <strnlen_P>:
 972:	fc 01       	movw	r30, r24
 974:	05 90       	lpm	r0, Z+
 976:	61 50       	subi	r22, 0x01	; 1
 978:	70 40       	sbci	r23, 0x00	; 0
 97a:	01 10       	cpse	r0, r1
 97c:	d8 f7       	brcc	.-10     	; 0x974 <strnlen_P+0x2>
 97e:	80 95       	com	r24
 980:	90 95       	com	r25
 982:	8e 0f       	add	r24, r30
 984:	9f 1f       	adc	r25, r31
 986:	08 95       	ret

00000988 <strnlen>:
 988:	fc 01       	movw	r30, r24
 98a:	61 50       	subi	r22, 0x01	; 1
 98c:	70 40       	sbci	r23, 0x00	; 0
 98e:	01 90       	ld	r0, Z+
 990:	01 10       	cpse	r0, r1
 992:	d8 f7       	brcc	.-10     	; 0x98a <strnlen+0x2>
 994:	80 95       	com	r24
 996:	90 95       	com	r25
 998:	8e 0f       	add	r24, r30
 99a:	9f 1f       	adc	r25, r31
 99c:	08 95       	ret

0000099e <fputc>:
 99e:	0f 93       	push	r16
 9a0:	1f 93       	push	r17
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
 9a6:	18 2f       	mov	r17, r24
 9a8:	09 2f       	mov	r16, r25
 9aa:	eb 01       	movw	r28, r22
 9ac:	8b 81       	ldd	r24, Y+3	; 0x03
 9ae:	81 fd       	sbrc	r24, 1
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <fputc+0x1a>
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
 9b4:	9f ef       	ldi	r25, 0xFF	; 255
 9b6:	20 c0       	rjmp	.+64     	; 0x9f8 <fputc+0x5a>
 9b8:	82 ff       	sbrs	r24, 2
 9ba:	10 c0       	rjmp	.+32     	; 0x9dc <fputc+0x3e>
 9bc:	4e 81       	ldd	r20, Y+6	; 0x06
 9be:	5f 81       	ldd	r21, Y+7	; 0x07
 9c0:	2c 81       	ldd	r18, Y+4	; 0x04
 9c2:	3d 81       	ldd	r19, Y+5	; 0x05
 9c4:	42 17       	cp	r20, r18
 9c6:	53 07       	cpc	r21, r19
 9c8:	7c f4       	brge	.+30     	; 0x9e8 <fputc+0x4a>
 9ca:	e8 81       	ld	r30, Y
 9cc:	f9 81       	ldd	r31, Y+1	; 0x01
 9ce:	9f 01       	movw	r18, r30
 9d0:	2f 5f       	subi	r18, 0xFF	; 255
 9d2:	3f 4f       	sbci	r19, 0xFF	; 255
 9d4:	39 83       	std	Y+1, r19	; 0x01
 9d6:	28 83       	st	Y, r18
 9d8:	10 83       	st	Z, r17
 9da:	06 c0       	rjmp	.+12     	; 0x9e8 <fputc+0x4a>
 9dc:	e8 85       	ldd	r30, Y+8	; 0x08
 9de:	f9 85       	ldd	r31, Y+9	; 0x09
 9e0:	81 2f       	mov	r24, r17
 9e2:	09 95       	icall
 9e4:	89 2b       	or	r24, r25
 9e6:	29 f7       	brne	.-54     	; 0x9b2 <fputc+0x14>
 9e8:	2e 81       	ldd	r18, Y+6	; 0x06
 9ea:	3f 81       	ldd	r19, Y+7	; 0x07
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	3f 83       	std	Y+7, r19	; 0x07
 9f2:	2e 83       	std	Y+6, r18	; 0x06
 9f4:	81 2f       	mov	r24, r17
 9f6:	90 2f       	mov	r25, r16
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	08 95       	ret

00000a02 <__ultoa_invert>:
 a02:	fa 01       	movw	r30, r20
 a04:	aa 27       	eor	r26, r26
 a06:	28 30       	cpi	r18, 0x08	; 8
 a08:	51 f1       	breq	.+84     	; 0xa5e <__ultoa_invert+0x5c>
 a0a:	20 31       	cpi	r18, 0x10	; 16
 a0c:	81 f1       	breq	.+96     	; 0xa6e <__ultoa_invert+0x6c>
 a0e:	e8 94       	clt
 a10:	6f 93       	push	r22
 a12:	6e 7f       	andi	r22, 0xFE	; 254
 a14:	6e 5f       	subi	r22, 0xFE	; 254
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	af 4f       	sbci	r26, 0xFF	; 255
 a1e:	b1 e0       	ldi	r27, 0x01	; 1
 a20:	3e d0       	rcall	.+124    	; 0xa9e <__ultoa_invert+0x9c>
 a22:	b4 e0       	ldi	r27, 0x04	; 4
 a24:	3c d0       	rcall	.+120    	; 0xa9e <__ultoa_invert+0x9c>
 a26:	67 0f       	add	r22, r23
 a28:	78 1f       	adc	r23, r24
 a2a:	89 1f       	adc	r24, r25
 a2c:	9a 1f       	adc	r25, r26
 a2e:	a1 1d       	adc	r26, r1
 a30:	68 0f       	add	r22, r24
 a32:	79 1f       	adc	r23, r25
 a34:	8a 1f       	adc	r24, r26
 a36:	91 1d       	adc	r25, r1
 a38:	a1 1d       	adc	r26, r1
 a3a:	6a 0f       	add	r22, r26
 a3c:	71 1d       	adc	r23, r1
 a3e:	81 1d       	adc	r24, r1
 a40:	91 1d       	adc	r25, r1
 a42:	a1 1d       	adc	r26, r1
 a44:	20 d0       	rcall	.+64     	; 0xa86 <__ultoa_invert+0x84>
 a46:	09 f4       	brne	.+2      	; 0xa4a <__ultoa_invert+0x48>
 a48:	68 94       	set
 a4a:	3f 91       	pop	r19
 a4c:	2a e0       	ldi	r18, 0x0A	; 10
 a4e:	26 9f       	mul	r18, r22
 a50:	11 24       	eor	r1, r1
 a52:	30 19       	sub	r19, r0
 a54:	30 5d       	subi	r19, 0xD0	; 208
 a56:	31 93       	st	Z+, r19
 a58:	de f6       	brtc	.-74     	; 0xa10 <__ultoa_invert+0xe>
 a5a:	cf 01       	movw	r24, r30
 a5c:	08 95       	ret
 a5e:	46 2f       	mov	r20, r22
 a60:	47 70       	andi	r20, 0x07	; 7
 a62:	40 5d       	subi	r20, 0xD0	; 208
 a64:	41 93       	st	Z+, r20
 a66:	b3 e0       	ldi	r27, 0x03	; 3
 a68:	0f d0       	rcall	.+30     	; 0xa88 <__ultoa_invert+0x86>
 a6a:	c9 f7       	brne	.-14     	; 0xa5e <__ultoa_invert+0x5c>
 a6c:	f6 cf       	rjmp	.-20     	; 0xa5a <__ultoa_invert+0x58>
 a6e:	46 2f       	mov	r20, r22
 a70:	4f 70       	andi	r20, 0x0F	; 15
 a72:	40 5d       	subi	r20, 0xD0	; 208
 a74:	4a 33       	cpi	r20, 0x3A	; 58
 a76:	18 f0       	brcs	.+6      	; 0xa7e <__ultoa_invert+0x7c>
 a78:	49 5d       	subi	r20, 0xD9	; 217
 a7a:	31 fd       	sbrc	r19, 1
 a7c:	40 52       	subi	r20, 0x20	; 32
 a7e:	41 93       	st	Z+, r20
 a80:	02 d0       	rcall	.+4      	; 0xa86 <__ultoa_invert+0x84>
 a82:	a9 f7       	brne	.-22     	; 0xa6e <__ultoa_invert+0x6c>
 a84:	ea cf       	rjmp	.-44     	; 0xa5a <__ultoa_invert+0x58>
 a86:	b4 e0       	ldi	r27, 0x04	; 4
 a88:	a6 95       	lsr	r26
 a8a:	97 95       	ror	r25
 a8c:	87 95       	ror	r24
 a8e:	77 95       	ror	r23
 a90:	67 95       	ror	r22
 a92:	ba 95       	dec	r27
 a94:	c9 f7       	brne	.-14     	; 0xa88 <__ultoa_invert+0x86>
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	61 05       	cpc	r22, r1
 a9a:	71 05       	cpc	r23, r1
 a9c:	08 95       	ret
 a9e:	9b 01       	movw	r18, r22
 aa0:	ac 01       	movw	r20, r24
 aa2:	0a 2e       	mov	r0, r26
 aa4:	06 94       	lsr	r0
 aa6:	57 95       	ror	r21
 aa8:	47 95       	ror	r20
 aaa:	37 95       	ror	r19
 aac:	27 95       	ror	r18
 aae:	ba 95       	dec	r27
 ab0:	c9 f7       	brne	.-14     	; 0xaa4 <__ultoa_invert+0xa2>
 ab2:	62 0f       	add	r22, r18
 ab4:	73 1f       	adc	r23, r19
 ab6:	84 1f       	adc	r24, r20
 ab8:	95 1f       	adc	r25, r21
 aba:	a0 1d       	adc	r26, r0
 abc:	08 95       	ret

00000abe <__prologue_saves__>:
 abe:	2f 92       	push	r2
 ac0:	3f 92       	push	r3
 ac2:	4f 92       	push	r4
 ac4:	5f 92       	push	r5
 ac6:	6f 92       	push	r6
 ac8:	7f 92       	push	r7
 aca:	8f 92       	push	r8
 acc:	9f 92       	push	r9
 ace:	af 92       	push	r10
 ad0:	bf 92       	push	r11
 ad2:	cf 92       	push	r12
 ad4:	df 92       	push	r13
 ad6:	ef 92       	push	r14
 ad8:	ff 92       	push	r15
 ada:	0f 93       	push	r16
 adc:	1f 93       	push	r17
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
 ae6:	ca 1b       	sub	r28, r26
 ae8:	db 0b       	sbc	r29, r27
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	f8 94       	cli
 aee:	de bf       	out	0x3e, r29	; 62
 af0:	0f be       	out	0x3f, r0	; 63
 af2:	cd bf       	out	0x3d, r28	; 61
 af4:	09 94       	ijmp

00000af6 <__epilogue_restores__>:
 af6:	2a 88       	ldd	r2, Y+18	; 0x12
 af8:	39 88       	ldd	r3, Y+17	; 0x11
 afa:	48 88       	ldd	r4, Y+16	; 0x10
 afc:	5f 84       	ldd	r5, Y+15	; 0x0f
 afe:	6e 84       	ldd	r6, Y+14	; 0x0e
 b00:	7d 84       	ldd	r7, Y+13	; 0x0d
 b02:	8c 84       	ldd	r8, Y+12	; 0x0c
 b04:	9b 84       	ldd	r9, Y+11	; 0x0b
 b06:	aa 84       	ldd	r10, Y+10	; 0x0a
 b08:	b9 84       	ldd	r11, Y+9	; 0x09
 b0a:	c8 84       	ldd	r12, Y+8	; 0x08
 b0c:	df 80       	ldd	r13, Y+7	; 0x07
 b0e:	ee 80       	ldd	r14, Y+6	; 0x06
 b10:	fd 80       	ldd	r15, Y+5	; 0x05
 b12:	0c 81       	ldd	r16, Y+4	; 0x04
 b14:	1b 81       	ldd	r17, Y+3	; 0x03
 b16:	aa 81       	ldd	r26, Y+2	; 0x02
 b18:	b9 81       	ldd	r27, Y+1	; 0x01
 b1a:	ce 0f       	add	r28, r30
 b1c:	d1 1d       	adc	r29, r1
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	de bf       	out	0x3e, r29	; 62
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	cd bf       	out	0x3d, r28	; 61
 b28:	ed 01       	movw	r28, r26
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
